<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Henooh.DeviceEmulator</name>
    </assembly>
    <members>
        <member name="T:Henooh.DeviceEmulator.Native.BaseController">
            <summary>
            Provides structures used by both KeyboardContoller and MouseController. 
            </summary>
            <remarks>
            Contains two structure fields.
            </remarks>
            <visibility>public</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2016-08-29  AS00716  v1.00.03.022  Initial Version
            2016-10-15  AS00750  v1.00.03.037  Combined InputBuffer and InputList from Controller to BaseController
            2016-10-18  AS00753  v1.00.03.039  Added summary and remarks, added visibility xml tag to class
            2016-10-30  AS00765  v1.00.04.003  Implement CancellationToken on BaseController
            2016-11-01  AS00767  v1.00.04.004  Changed the logic of Sleep method to account for fractional intervals
            2016-11-22  AS00783  v1.00.04.011  Added comments to methods
            2016-11-24  AS00785  v1.00.05.001  Removed Console output
            2016-11-26  AS00781  v1.00.05.002  Removed unused using directives
            2017-11-10  AS00952  v1.01.01.004  Sleep method is now asynchronous and uses Task.Delay instead of Thread.Sleep
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            2018-12-17  AS01131  v1.01.03.003  Add visibility tags to XML comments
            2019-01-30  AS01143  v1.01.03.005  Modify the layout of the code, add XML header comments to all properties
            </revisionhistory>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.BaseController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Henooh.DeviceEmulator.Native.BaseController"/> with no arguments.
            </summary>
            <visibility>protected</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.BaseController.inputBuffer">
            <summary>
            Buffer of <see cref="T:Henooh.DeviceEmulator.Native.Input"/>.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.BaseController.inputList">
            <summary>
            List of <see cref="T:Henooh.DeviceEmulator.Native.Input"/>.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.BaseController.CancellationToken">
            <summary>
            Provides access to CancellationToken.
            </summary>
            <visibility>private</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.BaseController.RunMode">
            <summary>
            Allows the library to run in three different modes.
            0 - Normal: Will run normally.
            4 - Suppress: Will prevent sending any SendInput.
            </summary>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.BaseController.#ctor(System.Threading.CancellationToken)">
            <summary>
            Default constructor with CancellationToken.
            </summary>
            <param name="aCancellationToken"></param>
            <visibility>protected</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.BaseController.Sleep(System.TimeSpan)">
            <summary>
            Provides Sleep cycle that can be cancelled with CancellationToken.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.BaseController.Sleep(System.Int32)">
            <summary>
            Provides Sleep cycle that can be cancelled with CancellationToken.
            </summary>
            <param name="aMillisecondTimeout"></param>
            <visibility>public</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.MouseButton">
            <summary>
            Contains information about a different set of mouse buttons.
            </summary>
            <remarks>
            This method is to simplify when a button on a mouse is interacted.
            Main reason for this method was included when a need to simplify when left and right mouse buttons are
            pressed for movements.
            </remarks>
            <visibility>public</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2017-01-07  AS00810  v1.00.06.002  Initial Version
            2017-02-28  AS00843  v1.00.06.012  Modify summary, remarks, add XML comments to all enumeration values
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            </revisionhistory>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseButton.Left">
            <summary>
            Represents the left mouse button.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseButton.Right">
            <summary>
            Represents the right mouse button.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseButton.Middle">
            <summary>
            Represents the middle mouse button.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseButton.XButton">
            <summary>
            Represents the X mouse button.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseButton.LeftAndRight">
            <summary>
            Represents the combination of the left and the right mouse buttons.
            </summary>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.SafeNativeMethods">
            <summary>
            Provides access to Native methods to the assembly.
            </summary>
            <remarks>
            SafeNativeMethod provides the assembly to use common windows libraries to execute native methods.
            Refer to documentation regarding what the native methods implemented in HenoohDeviceEmulator, and update
            documents as necessary.
            </remarks>
            <visibility>internal</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2016-09-19  AS00724  v1.00.03.025  Initial Version
            2016-09-22  AS00727  v1.00.03.027  Moved P/Invoke methods from ObserverAbstract class
            2016-09-24  AS00729  v1.00.03.028  Renamed the class to SafeNativeMethods, moved more methods to this class
            2016-09-30  AS00735  v1.00.00.029  Moved SendInput method to this class
            2016-10-01  AS00736  v1.00.00.030  Moved GetCurrentThreadId method to this class
            2016-10-02  AS00737  v1.00.00.031  Replace int with IntPtr for SafeNativeMethod calls
            2016-10-08  AS00743  v1.00.03.032  Use IntPtr for wParam instead of int
            2016-10-11  AS00746  v1.00.03.033  Added explicit class access modifier as internal, renamed INPUT to Input
            2016-10-13  AS00748  v1.00.03.035  Added remarks
            2016-10-19  AS00754  v1.00.03.040  Added visibility tags
            2016-11-26  AS00781  v1.00.05.002  Removed unused using directives
            2016-12-09  AS00800  v1.00.05.007  Move ForPerMonitorDPI method to this class
            2017-02-28  AS00843  v1.00.06.012  Add XML comments to all methods, modify remarks on CallNextHookEx method
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            2019-03-25  AS01160  v1.01.03.008  Add private constructor to resolve Code Analysis warning
            </revisionhistory>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.SafeNativeMethods.#ctor">
            <summary>
            Private constructor.
            </summary>
            <remarks>
            <see cref="T:Henooh.DeviceEmulator.Native.SafeNativeMethods"/> is an internal class that is apparently never instantiated, and only
            contain static methods. Adding a private constructor will prevent the compiler from generating a
            default constructor.
            </remarks>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.SafeNativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            The CallNextHookEx function passes the hook information to the next hook procedure in the current hook chain. 
            A hook procedure can call this function either before or after processing the hook information. 
            </summary>
            <param name="idHook">Ignored.</param>
            <param name="nCode">[in] Specifies the hook code passed to the current hook procedure.</param>
            <param name="wParam">[in] Specifies the wParam value passed to the current hook procedure.</param>
            <param name="lParam">[in] Specifies the lParam value passed to the current hook procedure.</param>
            <returns>This value is returned by the next hook procedure in the chain.</returns>
            <remarks>
            https://msdn.microsoft.com/en-us/library/windows/desktop/ms644974%28v=vs.85%29.aspx
            </remarks>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.SafeNativeMethods.SetWindowsHookEx(System.Int32,Henooh.DeviceEmulator.Native.ObserverAbstract.HookCallback,System.IntPtr,System.Int32)">
            <summary>
            The SetWindowsHookEx function installs an application-defined hook procedure into a hook chain. 
            You would install a hook procedure to monitor the system for certain types of events. These events 
            are associated either with a specific thread or with all threads in the same desktop as the calling thread. 
            </summary>
            <param name="idHook">
            [in] Specifies the type of hook procedure to be installed. This parameter can be one of the following values.
            </param>
            <param name="lpfn">
            [in] Pointer to the hook procedure. If the dwThreadId parameter is zero or specifies the identifier of a 
            thread created by a different process, the lpfn parameter must point to a hook procedure in a dynamic-link 
            library (DLL). Otherwise, lpfn can point to a hook procedure in the code associated with the current process.
            </param>
            <param name="hMod">
            [in] Handle to the DLL containing the hook procedure pointed to by the lpfn parameter. 
            The hMod parameter must be set to NULL if the dwThreadId parameter specifies a thread created by 
            the current process and if the hook procedure is within the code associated with the current process. 
            </param>
            <param name="dwThreadId">
            [in] Specifies the identifier of the thread with which the hook procedure is to be associated. 
            If this parameter is zero, the hook procedure is associated with all existing threads running in the 
            same desktop as the calling thread. 
            </param>
            <returns>
            If the function succeeds, the return value is the handle to the hook procedure.
            If the function fails, the return value is NULL. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.SafeNativeMethods.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
            The UnhookWindowsHookEx function removes a hook procedure installed in a hook chain by the SetWindowsHookEx function. 
            </summary>
            <param name="idHook">
            [in] Handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to SetWindowsHookEx. 
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.SafeNativeMethods.GetDoubleClickTime">
            <summary>
            
            </summary>
            <returns></returns>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.SafeNativeMethods.ToAscii(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            The ToAscii function translates the specified virtual-key code and keyboard 
            state to the corresponding character or characters. The function translates the code 
            using the input language and physical keyboard layout identified by the keyboard layout handle.
            </summary>
            <param name="uVirtKey">
            [in] Specifies the virtual-key code to be translated. 
            </param>
            <param name="uScanCode">
            [in] Specifies the hardware scan code of the key to be translated. 
            The high-order bit of this value is set if the key is up (not pressed). 
            </param>
            <param name="lpbKeyState">
            [in] Pointer to a 256-byte array that contains the current keyboard state. 
            Each element (byte) in the array contains the state of one key. 
            If the high-order bit of a byte is set, the key is down (pressed). 
            The low bit, if set, indicates that the key is toggled on. In this function, 
            only the toggle bit of the CAPS LOCK key is relevant. The toggle state 
            of the NUM LOCK and SCROLL LOCK keys is ignored.
            </param>
            <param name="lpwTransKey">
            [out] Pointer to the buffer that receives the translated character or characters. 
            </param>
            <param name="fuState">
            [in] Specifies whether a menu is active. This parameter must be 1 if a menu is active, or 0 otherwise. 
            </param>
            <returns>
            If the specified key is a dead key, the return value is negative. Otherwise, it is one of the following values. 
            Value Meaning 
            0 The specified virtual key has no translation for the current state of the keyboard. 
            1 One character was copied to the buffer. 
            2 Two characters were copied to the buffer. This usually happens when a dead-key character 
            (accent or diacritic) stored in the keyboard layout cannot be composed with the specified 
            virtual key to form a single character. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/toascii.asp
            </remarks>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.SafeNativeMethods.GetKeyboardState(System.Byte[])">
            <summary>
            The GetKeyboardState function copies the status of the 256 virtual keys to the 
            specified buffer. 
            </summary>
            <param name="pbKeyState">
            [in] Pointer to a 256-byte array that contains keyboard key states. 
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError. 
            </returns>
            <remarks>
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/toascii.asp
            </remarks>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.SafeNativeMethods.GetKeyState(System.Int32)">
             <summary>
             The GetKeyState function retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled 
             (on, off—alternating each time the key is pressed). 
             </summary>
             <param name="vKey">
             [in] Specifies a virtual key. If the desired virtual key is a letter or digit (A through Z, a through z, or 0 through 9), nVirtKey must be set to the ASCII value of that character. For other keys, it must be a virtual-key code. 
             </param>
             <returns>
             The return value specifies the status of the specified virtual key, as follows: 
            If the high-order bit is 1, the key is down; otherwise, it is up.
            If the low-order bit is 1, the key is toggled. A key, such as the CAPS LOCK key, is toggled if it is turned on. The key is off and untoggled if the low-order bit is 0. A toggle key's indicator light (if any) on the keyboard will be on when the key is toggled, and off when the key is untoggled.
             </returns>
             <remarks>http://msdn.microsoft.com/en-us/library/ms646301.aspx</remarks>
             <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.SafeNativeMethods.SendInput(System.UInt32,Henooh.DeviceEmulator.Native.Input[],System.Int32)">
            <summary>
            SendInput.
            </summary>
            <param name="numberOfInputs"></param>
            <param name="inputs"></param>
            <param name="sizeOfInputStructure"></param>
            <returns></returns>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.SafeNativeMethods.GetCurrentThreadId">
            <summary>
            Retrieves the unmanaged thread identifier of the calling thread.
            </summary>
            <returns></returns>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.SafeNativeMethods.LogicalToPhysicalPointForPerMonitorDPI(System.IntPtr,System.Drawing.Point@)">
            <summary>
            Converts a point in a window from logical coordinates into physical coordinates, regardless of
            dots per inch (dpi) awareness of the caller.
            </summary>
            <param name="hMonitor">A handle to the window whose transform is used for the conversion.</param>
            <param name="aPoint">A pointer to a Point structure that specifies the logical coordinates to be converted.
            The new physical coordinates are copied into this structure if the function succeeds.</param>
            <returns>Returns true if successful, or false otherwise.</returns>
            <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/dn384110%28v=vs.85%29.aspx</remarks>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.SafeNativeMethods.PhysicalToLogicalPointForPerMonitorDPI(System.IntPtr,System.Drawing.Point@)">
            <summary>
            Converts a point in a window from physical coordinates into logical coordinates, regardless of
            dots per inch (dpi) awareness of the caller.
            </summary>
            <param name="hMonitor">A handle to the window whose transform is used for the conversion.</param>
            <param name="aPoint">A pointer to a Point structure the specifies the physical/screen coordinates to be
            converted. The new logical coordinates are copied into this structure if the function succeds.</param>
            <returns>Returns true if successful, or false otherwise.</returns>
            <remarks>https://msdn.microsoft.com/en-us/library/windows/desktop/dn384112%28v=vs.85%29.aspx</remarks>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.SafeNativeMethods.SystemParametersInfo(System.UInt32,System.UInt32,System.IntPtr,System.UInt32)">
            <summary>
            
            </summary>
            <param name="uiAction"></param>
            <param name="uiParam"></param>
            <param name="pvParam"></param>
            <param name="fWinIni"></param>
            <returns></returns>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.AppObserver">
            <summary>
            Provides methods for subscription and unsubscription to application mouse and keyboard hooks.
            </summary>
            <remarks>
            AppObserver class is a derived class from <see cref="T:Henooh.DeviceEmulator.Native.ObserverAbstract"/> which runs 
            SetWindowsHookEx function.
            </remarks>
            <visibility>internal</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2015-04-29  AS00447  v0.00.04.013  Initial Version
            2015-06-08  AS00468  v0.00.04.030  Renamed Hooker class to ObserverAbstract
            2015-07-23  AS00495  v0.00.04.041  Renamed class to AppObserver
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2015-11-09  AS00559  v1.00.01.001  Renamed Subscribe method to Observe Method and modify CodingStyle
            2016-02-06  AS00619  v1.00.03.001  Modified the comment for IsGlobal method
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-09-22  AS00727  v1.00.03.027  Use moved NativeMethods
            2016-09-24  AS00729  v1.00.03.028  Renamed NativeMethods class to SafeNativeMethods class
            2016-10-01  AS00735  v1.00.03.030  Moved GetCurrentThreadId class to SaveNativeMethods class
            2016-10-02  AS00737  v1.00.03.031  Replace int with IntPtr for SafeNativeMethod calls
            2016-10-11  AS00746  v1.00.03.033  Added visibility xml tags, modified revision history
            2016-10-19  AS00754  v1.00.03.040  Modified summary and comments
            2016-11-26  AS00781  v1.00.05.002  Removed unused using directives
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            2019-03-27  AS01162  v1.01.03.010  Resolve CA1812 by adding a private constructor
            2019-05-02  AS01185  v1.01.04.012  Change the class accessor to be public to allow AppObserver to be set
            </revisionhistory>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.AppObserver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Henooh.DeviceEmulator.Native.AppObserver"/> with no arguments.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.AppObserver.WH_MOUSE">
            <summary>
            Constant value that is used to install a hook procedure for a mouse in applications.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.AppObserver.WH_KEYBOARD">
            <summary>
            Constant value that is used to install a hook procedure for a keyboard in applications.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.AppObserver.Observe(System.Int32,Henooh.DeviceEmulator.Native.ObserverAbstract.HookCallback)">
            <summary>
            Observes an application hook by a hook identification and HookCallback.
            </summary>
            <param name="aHookId"></param>
            <param name="aHookCallback"></param>
            <returns>Integer value of hookHandle from SetWindowHookEx method</returns>
            <visibility>internal</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.AppObserver.IsGlobal">
            <summary>
            Returns overridden IsGlobal property, set to false for an AppObserver.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.BaseObserver">
            <summary>
            Provides a set of common features between application observers and global observers.
            It provides base methods to subscribe and unsubscribe to hooks.
            Common processing, error handling and cleanup logic.
            </summary>
            <remarks>
            BaseObserver has components that is shared by AppObserver and GlobalObserver.
            </remarks>
            <visibility>public</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2015-04-28  AS00446  v0.00.04.012  Initial Version
            2015-05-11  AS00455  v0.00.04.019  Renamed class to BaseObserver
            2015-06-08  AS00468  v0.00.04.030  Renamed Hooker class to ObserverAbstract
            2015-07-17  AS00491  v0.00.04.037  Corrected file name under remarks and made edits to summary
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2015-11-09  AS00559  v1.00.01.001  Renamed Subscribe method to Observe Method, m_Hooker to observer
            2015-11-11  AS00661  v1.00.01.003  Modified comments for GetHookId method
            2015-11-12  AS00562  v1.00.01.004  Use the new HookCallBack from ObserverAbstract namespace
            2015-11-16  AS00565  v1.00.01.006  Removed CallNextHook method and return directly from MonitorActivity method
            2015-11-17  AS00566  v1.00.01.007  Added default constructor that uses GlobalObserver
            2015-11-18  AS00568  v1.00.01.008  Added comments to new Default constructor, modified remarks
            2016-02-06  AS00619  v1.00.03.001  Added comment for IsGlobal method
            2016-02-27  AS00631  v1.00.03.005  Fixed the name of parameter for MonitorActivity method
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-09-17  AS00722  v1.00.03.023  Properly handle IDisposable
            2016-09-22  AS00727  v1.00.03.027  Use moved NativeMethods
            2016-09-24  AS00729  v1.00.03.028  Renamed NativeMethods class to SafeNativeMethods class
            2016-10-02  AS00737  v1.00.00.031  Replace int with IntPtr for SafeNativeMethod calls
            2016-10-08  AS00743  v1.00.03.032  Use IntPtr for wParam instead of int
            2016-10-11  AS00746  v1.00.03.033  Correctly implement IDisposable
            2016-10-12  AS00747  v1.00.03.034  Changed observer field to Observer property
            2016-10-13  AS00748  v1.00.03.035  Added comment to properties
            2016-10-18  AS00753  v1.00.03.039  Added visibilty xml tags, added xml comment to Dispose(bool)
            2016-10-19  AS00754  v1.00.03.040  Modified summary, comments throughout the code
            2016-11-26  AS00781  v1.00.05.002  Removed unused using directives
            2017-02-21  AS00839  v1.00.06.010  Change the comment to be more clear on Dispose method
            2017-10-15  AS00936  v1.01.01.003  Resolved IDE0016 message, null check can be simplified
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            2019-01-30  AS01143  v1.01.03.005  Modify the layout of the code, add XML header comments to all properties
            2019-03-25  AS01160  v1.01.03.008  Use the static StopObserve method from ObserverAbstract
            2019-03-27  AS01162  v1.01.03.010  Resolve CA1026 by adding constructor that provides all default arguments
            2019-04-24  AS01184  v1.01.04.011  Resolve CA1806 by assigning the result to a variable
            2019-05-02  AS01185  v1.01.04.012  Follow Henooh Coding Standards to have the code within 120 characters
            2019-08-08  AS01210  v1.01.04.014  Corrected spelling for the message that was thrown during an exception
            2019-08-12  AS01214  v1.01.04.016  Use the resource table to retrive string message for an exception
            </revisionhistory>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.BaseObserver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Henooh.DeviceEmulator.Native.BaseObserver"/> with no arguments.
            </summary>
            <remarks>
            Hooks are not active after instantiation. You need to use either <see cref="P:Henooh.DeviceEmulator.Native.BaseObserver.Enabled"/> 
            property or call <see cref="M:Henooh.DeviceEmulator.Native.BaseObserver.Start"/> method.
            </remarks>
            <visibility>protected</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.BaseObserver.#ctor(Henooh.DeviceEmulator.Native.ObserverAbstract)">
            <summary>
            Initializes a new instance of the <see cref="T:Henooh.DeviceEmulator.Native.BaseObserver"/> with <see cref="T:Henooh.DeviceEmulator.Native.ObserverAbstract"/> as a parameter.
            </summary>
            <param name="aObserver">
            Depending on this parameter the listener hooks either application or global observer events.
            </param>
            <remarks>
            Hooks are not active after instantiation. You need to use either <see cref="P:Henooh.DeviceEmulator.Native.BaseObserver.Enabled"/>
            property or call <see cref="M:Henooh.DeviceEmulator.Native.BaseObserver.Start"/> method.
            </remarks>
            <visibility>protected</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.BaseObserver.Observer">
            <summary>
            Provides instance of Observer to BaseObserver.
            </summary>
            <visibility>private</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.BaseObserver.HookHandle">
            <summary>
            Stores the handle to the Keyboard or Mouse hook procedure.
            </summary>
            <visibility>protected</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.BaseObserver.HookCallbackReferenceKeeper">
            <summary>
            Keeps the reference to prevent garbage collection of delegate. See: CallbackOnCollectedDelegate http://msdn.microsoft.com/en-us/library/43yky316(v=VS.100).aspx
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.BaseObserver.IsGlobal">
            <summary>
            Determine the value of IsGlobal based on value of observer.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.BaseObserver.ProcessCallback(System.IntPtr,System.IntPtr)">
            <summary>
            Provides a  method to be overriddden, which will dicate the logic of firing events.
            </summary>
            <visibility>protected</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.BaseObserver.MonitorActivity(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            A callback function which will be called every time a keyboard or mouse activity detected.
            </summary>
            <visibility>protected</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.BaseObserver.Start">
            <summary>
            Subscribes to the hook and starts firing events.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.BaseObserver.Stop">
            <summary>
            Unsubscribes from the hook and stops firing events.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception"></exception>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.BaseObserver.Replace(Henooh.DeviceEmulator.Native.ObserverAbstract)">
            <summary>
            Enables you to switch from application hooks to global hooks and vice versa on the fly
            without unsubscribing from events. Component remains enabled or disabled state after this call as it was before.
            </summary>
            <param name="aObserver">An AppObserver or GlobalObserver object.</param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.BaseObserver.GetHookId">
            <summary>
            Override to deliver correct id to be used for <see cref="M:Henooh.DeviceEmulator.Native.SafeNativeMethods.SetWindowsHookEx(System.Int32,Henooh.DeviceEmulator.Native.ObserverAbstract.HookCallback,System.IntPtr,System.Int32)"/> call.
            </summary>
            <returns></returns>
            <visibility>protected</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.BaseObserver.Enabled">
            <summary>
            Gets or Sets the enabled status of the Hook.
            </summary>
            <remarks>
            True - The Hook is presently installed, activated, and will fire events.
            False - The Hook is not part of the hook chain, and will not fire events.
            </remarks>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.BaseObserver.Dispose">
            <summary>
            Release delegates, unsubscribes from hooks.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.BaseObserver.Finalize">
            <summary>
            Unsubscribes from global hooks skiping error handling.
            </summary>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.BaseObserver.Dispose(System.Boolean)">
            <summary>
            Releases delegates, unsubscribe from hooks.
            </summary>
            <param name="aDisposing"></param>
            <visibility>protected</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.GlobalObserver">
            <summary>
            Provides methods for subscription and unsubscription to global mouse and keyboard hooks.
            </summary>
            <remarks>
            GlobalObserver class is a derived class from <see cref="T:Henooh.DeviceEmulator.Native.ObserverAbstract"/> which runs 
            SetWindowsHookEx function.
            </remarks>
            <visibility>internal</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2015-04-29  AS00447  v0.00.04.013  Initial Version
            2015-06-04  AS00466  v0.00.04.028  Implement changes to GlobalHooker to GlobalObserver
            2015-06-08  AS00468  v0.00.04.030  Renamed Hooker class to ObserverAbstract
            2015-07-20  AS00492  v0.00.04.038  Made updates to remark and summary
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2015-11-09  AS00559  v1.00.01.001  Renamed Subscribe method to Observe Method
            2015-11-17  AS00566  v1.00.01.007  Modified the summary, remarks and method comments
            2015-11-23  AS00573  v1.00.01.010  Modified summary and remarks
            2016-02-06  AS00619  v1.00.03.001  Modified the comment for IsGlobal method
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-09-22  AS00727  v1.00.03.027  Use moved NativeMethods
            2016-09-24  AS00729  v1.00.03.028  Renamed NativeMethods class to SafeNativeMethods class
            2016-10-02  AS00737  v1.00.03.031  Replace int with IntPtr for SafeNativeMethod calls
            2016-10-12  AS00747  v1.00.03.034  Changed access modifier from public to internal
            2016-10-18  AS00753  v1.00.03.039  Added visibilty xml tags, fixed incorrect versions in revisionhistory
            2016-10-19  AS00754  v1.00.03.040  Modified comments throughout code, rearranged layout
            2016-11-26  AS00781  v1.00.05.002  Removed unused using directives
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            </revisionhistory>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.GlobalObserver.WH_MOUSE_LL">
            <summary>
            Constant value that is used to install a hook procedure for a mouse in low level input events.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.GlobalObserver.WH_KEYBOARD_LL">
            <summary>
            Constant value that is used to install a hook procedure for a keyboard in low level input events.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.GlobalObserver.Observe(System.Int32,Henooh.DeviceEmulator.Native.ObserverAbstract.HookCallback)">
            <summary>
            Observes a global hook by a hook identification and HookCallback.
            </summary>
            <param name="hookId"></param>
            <param name="hookCallback"></param>
            <returns></returns>
            <visibility>internal</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.GlobalObserver.IsGlobal">
            <summary>
            Getter for overridden IsGlobal property, set to true for a GlobalObserver.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.HardwareInput">
            <summary>
            Contains information about a simulated message generated by an input device other than a keyboard or mouse.
            </summary>
            <remarks>
            HARDWAREINPUT structure 
            Contains information about a simulated message generated by an input device other than a keyboard 
            or a mouse.  
            <code>
            C++
            typedef struct tagHARDWAREINPUT {
               DWORD uMsg;
               WORD wParamL;
               WORD wParamH;
            } HARDWAREINPUT, *PHARDWAREINPUT
            </code>
            (see: http://msdn.microsoft.com/en-us/library/ms646269(VS.85).aspx)
            Declared in Winuser.h, include Windows.h
            </remarks>
            <visibility>internal</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2013-10-15  AS00122  v0.00.00.122  Initial Version
            2014-03-18  AS00203  v0.00.00.203  Moved to Henooh.Utility.Native Namespace
            2014-04-14  AS00230  v0.00.00.230  Moved to HenoohUtility as a Class Library Project (dll)
            2015-04-02  AS00420  v0.00.04.000  Moved to HenoohInputSimulator Project
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2015-11-11  AS00556  v1.00.01.003  Modified the summary and remarks for better formatting for Documentation
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-10-11  AS00746  v1.00.03.033  Renamed the class from HARDWAREINPUT, changed access modifier
            2016-10-19  AS00754  v1.00.03.040  Modified summary and remarks, methods, access modifiers as internal
            2016-10-20  AS00755  v1.00.03.041  Added visibility xml tags
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            </revisionhistory>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.HardwareInput.Msg">
            <summary>
            Specifies the message generated by the input hardware. 
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.HardwareInput.ParamL">
            <summary>
            Specifies the low-order word of the lParam parameter for uMsg. 
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.HardwareInput.ParamH">
            <summary>
            Specifies the high-order word of the lParam parameter for uMsg. 
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.A_NamespaceDoc">
            <summary>
            The Henooh.DeviceEmulator.Native namspace contains the structs and classes used within Henooh.DeviceEmulator 
            library.
            </summary>
            <remarks>
            The Henooh.DeviceSimulator.Native namespace contains Observers, Mouse and Keyboard structures, Message 
            structures, Input structures and all necessary files that makes HenoohDeviceEmulator work
            </remarks>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2015-11-02  AS00552  v1.00.00.003  Initial Version
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2015-11-07  AS00556  v1.00.00.007  Modified summary and remarks section
            2015-11-07  AS00557  v1.00.01.000  New Release with project renamed and full documentation
            2016-03-27  AS00656  v1.00.03.011  Removed Native.XButton.cs file
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-10-11  AS00746  v1.00.03.033  Removed XButton class from this namespace
            2016-11-20  AS00781  v1.00.04.010  Removed unused using directives
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            2018-06-06  AS01074  v1.01.03.002  Modify summary and remarks
            2019-03-27  AS01162  v1.01.03.010  Removed KeyboardPressEventArgsWpf and KeyEventArgWpfExt classes
            2019-04-11  AS01175  v1.01.04.005  Rename the class to A_NamespaceDoc
            2019-04-23  AS01183  v1.01.04.010  Add abstract and internal prefix to the class
            </revisionhistory>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.ObserverAbstract">
            <summary>
            Provides abstract of methods used by Observer classes. Provides base implementation of methods for 
            subscription and unsubscription to application and/or global mouse and keyboard hooks.
            </summary>
            <remarks>
            ObserverAbstract uses combination of SetWindowHookEx to raise events.
            </remarks>
            <visibility>internal</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2015-04-28  AS00446  v0.00.04.012  Initial Version
            2015-05-14  AS00457  v0.00.04.021  During Unsubscribe, result of 0 is expected from UnhookWindowsHookEx
            2015-06-08  AS00468  v0.00.04.030  Renamed Hooker class to ObserverAbstract
            2015-08-18  AS00509  v0.00.04.050  Correct file name under remarks as ObserverAbstract
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2015-11-09  AS00559  v1.00.01.001  Renamed Subscribe method to Observe, Unsubscribe to StopObserve
            2015-11-12  AS00562  v1.00.01.004  Moved HookCallback delegate inside to ObserverAbstract from Native namespace
            2016-07-13  AS00693  v1.00.03.018  Modified summary and remarks
            2016-07-24  AS00695  v1.00.03.019  Added XML comment to StopObserve method
            2016-09-22  AS00727  v1.00.03.027  Moved P/Invoke methods to NativeMethods class
            2016-09-24  AS00729  v1.00.03.028  Renamed NativeMethods class to SafeNativeMethods class
            2016-10-02  AS00737  v1.00.00.031  Replace int with IntPtr for SafeNativeMethod calls
            2016-10-08  AS00743  v1.00.03.032  Use IntPtr for wParam instead of int
            2016-10-14  AS00749  v1.00.03.036  Modified access modifier for HookCallback delegate to internal
            2016-10-20  AS00755  v1.00.03.041  Added visibility xml tags
            2016-11-26  AS00781  v1.00.05.002  Removed unused using directives
            2017-02-25  AS00842  v1.00.06.011  Observe method parameters to follow Henooh Style Guidelines
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            2019-02-04  AS01147  v1.01.03.006  Add XML header comments to all methods
            2019-03-25  AS01160  v1.01.03.008  Resolved CA1822, added static prefix to StopObserve method
            </revisionhistory>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.ObserverAbstract.HookCallback">
            <summary>
            The CallWndProc hook procedure is an application-defined or library-defined callback method used with
            the SetWindowsHookEx method. The HOOKPROC type defines a pointer to this callback method. CallWndProc
            is a placeholder for the application-defined or library defined method name.
            </summary>
            <remarks>
            HookCallback delegate is now part of ObserverAbstract.
            </remarks>
            <param name="nCode">
            Specifies whether the hook procedure must process the message.
            If nCode is HC_ACTION, the hook procedure must process the message.
            If nCode is less than zero, the hook procedure must pass the message to the
            CallNextHookEx method without further processing and must return the value returned
            by CallNextHook.</param>
            <param name="wParam">
            Specifies whether the message was sent by the current thread.
            If the message was sent by the current thread, it is nonzero; otherwise, it is zero.
            </param>
            <param name="lParam">
            Pointer to a CWPSTRUCT structure that contains details about the message.
            </param>
            <returns>
            If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx. 
            If nCode is greater than or equal to zero, it is highly recommended that you call CallNextHookEx 
            and return the value it returns; otherwise, other applications that have installed WH_CALLWNDPROC 
            hooks will not receive hook notifications and may behave incorrectly as a result. If the hook 
            procedure does not call CallNextHookEx, the return value should be zero. 
            </returns>
            <visibility>internal</visibility>
            <doctype>delegate</doctype>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.ObserverAbstract.Observe(System.Int32,Henooh.DeviceEmulator.Native.ObserverAbstract.HookCallback)">
            <summary>
            Attaches the process to a hook.
            </summary>
            <param name="aHookId"></param>
            <param name="aHookCallback"></param>
            <returns></returns>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.ObserverAbstract.StopObserve(System.IntPtr)">
            <summary>
            Unsubscribes from the hook and stops firing events.
            </summary>
            <param name="aHandle">Integer value of Hook id.</param>
            <visibility>internal</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.ObserverAbstract.IsGlobal">
            <summary>
            Property that indicates the access scope of the hook.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.ObserverAbstract.ThrowLastUnmanagedErrorAsException">
            <summary>
            This exception is thrown with the accurate error code if hookHandle is not established.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.Input">
            <summary>
            The INPUT structure is used by SendInput to store information for synthesizing input events such as keystrokes,
            mouse movement, and mouse clicks.
            </summary>
            <remarks>
            <code>
            C++
            typedef struct tagINPUT {
               DWORD type;
               union {
                  MOUSEINPUT    mi;
                  KEYBDINPUT    ki;
                  HARDWAREINPUT hi;
               };
            } INPUT, *PINPUT;
            </code>
            (see: http://msdn.microsoft.com/en-us/library/ms646270(VS.85).aspx)
            Declared in Winuser.h, include Windows.h
            This structure contains information identical to that used in the parameter list of the keybd_event or 
            mouse_event function.
            Windows 2000/XP: INPUT_KEYBOARD supports nonkeyboard input methods, such as handwriting recognition or 
            voice recognition, as if it were text input by using the KEYEVENTF_UNICODE flag. For more information, 
            see the remarks section of KEYBDINPUT.
            </remarks>
            <visibility>internal</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2013-10-15  AS00122  v0.00.00.122  Initial Version
            2014-03-18  AS00203  v0.00.00.203  Moved to Henooh.Utility.Native Namespace
            2014-04-14  AS00230  v0.00.00.230  Moved to HenoohUtility as a Class Library Project (dll)
            2015-04-02  AS00420  v0.00.04.000  Moved to HenoohInputSimulator Project
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2015-11-16  AS00565  v1.00.01.006  Modified the summary and remarks
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-10-11  AS00746  v1.00.03.033  Renamed the class INPUT to Input
            2016-10-19  AS00754  v1.00.03.040  Modified summary and remarks and  rest to follow Henooh Style Guidelines
            2016-10-20  AS00755  v1.00.03.041  Added visibility xml tags
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            </revisionhistory>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Input.Type">
            <summary>
            Specifies the type of the input event. This member can be one of the following values. 
            <see cref="F:Henooh.DeviceEmulator.Native.InputType.Mouse"/> The event is a mouse event. Use the mi structure of the union.
            <see cref="F:Henooh.DeviceEmulator.Native.InputType.Keyboard"/> The event is a keyboard event. Use the ki structure of the union.
            <see cref="F:Henooh.DeviceEmulator.Native.InputType.Hardware"/> Windows 95/98/Me: The event is from input hardware other than a 
            keyboard or mouse. Use the hi structure of the union.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Input.Data">
            <summary>
            The data structure that contains information about the simulated Mouse, Keyboard or Hardware event.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.InputType">
            <summary>
            Specifies the type of the input event. This member can be one of the following values. 
            </summary>
            <remarks>
            Contains enumeration of Hardware devices, Mouse as 0, Keyboard as 1.
            </remarks>
            <visibility>internal</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2013-10-15  AS00122  v0.00.00.122  Initial Version
            2014-03-18  AS00203  v0.00.00.203  Moved to Henooh.Utility.Native Namespace
            2014-04-14  AS00230  v0.00.00.230  Moved to HenoohUtility as a Class Library Project (dll)
            2015-04-02  AS00420  v0.00.04.000  Moved to HenoohInputSimulator Project
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-07-13  AS00693  v1.00.03.018  Modified remarks
            2016-10-11  AS00746  v1.00.03.033  Modified access modifier to internal from public
            2016-10-20  AS00755  v1.00.03.041  Added visibility xml tags
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            </revisionhistory>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.InputType.Mouse">
            <summary>
            INPUT_MOUSE = 0x00 (The event is a mouse event. Use the mi structure of the union.)
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.InputType.Keyboard">
            <summary>
            INPUT_KEYBOARD = 0x01 (The event is a keyboard event. Use the ki structure of the union.)
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.InputType.Hardware">
            <summary>
            INPUT_HARDWARE = 0x02 (Windows 95/98/Me: The event is from input hardware other than a keyboard or mouse. Use the hi structure of the union.)
            </summary>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.KeybdInput">
            <summary>
            The KEYBDINPUT structure contains information about a simulated keyboard event.  
            </summary>
            <remarks>
            C++
            typedef struct tagKEYBDINPUT {
               WORD wVk;
               WORD wScan;
               DWORD dwFlags;
               DWORD time;
               ULONG_PTR dwExtraInfo;
            } KEYBDINPUT, *PKEYBDINPUT;
            
            (see: http://msdn.microsoft.com/en-us/library/ms646271(VS.85).aspx)
            Declared in Winuser.h, include Windows.h
            Windows 2000/XP: INPUT_KEYBOARD supports nonkeyboard-input methods
            such as handwriting recognition or voice recognitionas if it were text input by using the 
            KEYEVENTF_UNICODE flag. If KEYEVENTF_UNICODE is specified, SendInput sends a WM_KEYDOWN or WM_KEYUP 
            message to the foreground thread's message queue with wParam equal to VK_PACKET. Once GetMessage or 
            PeekMessage obtains this message, passing the message to TranslateMessage posts a WM_CHAR message with 
            the Unicode character originally specified by wScan. This Unicode character will automatically be converted 
            to the appropriate ANSI value if it is posted to an ANSI window.
            Windows 2000/XP: Set the KEYEVENTF_SCANCODE flag to define keyboard input in terms of the scan code. 
            This is useful to simulate a physical keystroke regardless of which keyboard is currently being used. 
            The virtual key value of a key may alter depending on the current keyboard layout or what other keys 
            were pressed, but the scan code will always be the same.
            </remarks>
            <visibility>internal</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2013-10-15  AS00122  v0.00.00.122  Initial Version
            2014-03-18  AS00203  v0.00.00.203  Moved to Henooh.Utility.Native Namespace
            2014-04-14  AS00230  v0.00.00.230  Moved to HenoohUtility as a Class Library Project (dll)
            2015-04-02  AS00420  v0.00.04.000  Moved to HenoohInputSimulator Project
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2015-11-19  AS00569  v1.00.01.009  Modified summary and remarks
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-10-01  AS00736  v1.00.03.030  Modified access modifer to this struct as internal along with its fields
            2016-10-11  AS00746  v1.00.03.033  Renamed the class from KEYBDINPUT
            2016-10-18  AS00753  v1.00.03.039  Added visibilty xml tags, follow Henooh Style Guidelines for 120 char 
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            </revisionhistory>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.KeybdInput.KeyCode">
            <summary>
            Specifies a virtual-key code. The code must be a value in the range 1 to 254. 
            The Winuser.h header file provides macro definitions (VK_*) for each value. 
            If the dwFlags member specifies KEYEVENTF_UNICODE, wVk must be 0. 
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.KeybdInput.Scan">
            <summary>
            Specifies a hardware scan code for the key. If dwFlags specifies KEYEVENTF_UNICODE, 
            wScan specifies a Unicode character which is to be sent to the foreground application. 
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.KeybdInput.Flags">
            <summary>
            Specifies various aspects of a keystroke. This member can be certain combinations of the following values.
            KEYEVENTF_EXTENDEDKEY - If specified, the scan code was preceded by a prefix byte that has the value 0xE0 (224).
            KEYEVENTF_KEYUP - If specified, the key is being released. If not specified, the key is being pressed.
            KEYEVENTF_SCANCODE - If specified, wScan identifies the key and wVk is ignored. 
            KEYEVENTF_UNICODE - Windows 2000/XP: If specified, the system synthesizes a VK_PACKET keystroke. The wVk 
            parameter must be zero. This flag can only be combined with the KEYEVENTF_KEYUP flag. For more information, 
            see the Remarks section. 
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.KeybdInput.Time">
            <summary>
            Time stamp for the event, in milliseconds. If this parameter is zero, the system will provide its 
            own time stamp. 
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.KeybdInput.ExtraInfo">
            <summary>
            Specifies an additional value associated with the keystroke. Use the GetMessageExtraInfo function to 
            obtain this information. 
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.Keyboard">
            <summary>
            Provides a way to obtain KeyState and KeyboardState to KeyboardPressEventArgs.
            </summary>
            <remarks>
            Internal class that will obtain KeyState and KeyboardState through use of TryGetCharFromKeyboardState method.
            </remarks>
            <visibility>internal</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2015-04-29  AS00447  v0.00.04.013  Initial Version
            2015-05-21  AS00459  v0.00.04.023  Change parameters for TryGetCharFromKeyboardState
            2015-07-28  AS00497  v0.00.04.042  Use enumeration from VirtualKeyCode instead of consts
            2015-07-31  AS00499  v0.00.04.043  Delete commented out code, write comments
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2015-11-16  AS00565  v1.00.01.006  Removed static modifier from the class and methods
            2015-11-19  AS00569  v1.00.01.009  Modified summary, remarks and commenting on the method.
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-09-24  AS00729  v1.00.03.028  Moved P/Invoke methods to SafeNativeMethods
            2016-10-20  AS00755  v1.00.03.041  Added visibility xml tags
            2016-11-26  AS00781  v1.00.05.002  Removed unused using directives
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            2019-04-22  AS01182  v1.01.04.009  Resolve CA1822 by changing prefix for methods as static if needs to be
            2019-04-23  AS01183  v1.01.04.010  Add InvariantCulture to ToUpper method call
            2019-04-24  AS01184  v1.01.04.011  Resolve CA1806 by assigning the result to a variable
            2019-10-24  AS01242  v1.01.04.018  Resolve IDE0049 by simplifying Char to char
            </revisionhistory>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.Keyboard.TryGetCharFromKeyboardState(System.UInt16,System.UInt16,System.UInt32,System.Char@)">
            <summary>
            Method that returns Char from Keyboard State.
            </summary>
            <param name="virtualKeyCode"></param>
            <param name="scanCode"></param>
            <param name="fuState"></param>
            <param name="ch"></param>
            <returns></returns>
            <visibility>internal</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.KeyboardFlag">
            <summary>
            Specifies various aspects of a keystroke. This member can be certain combinations of the following values.
            </summary>
            <remarks>
            KeyboardFlag is internal enumeration exclusively used by KeyboardControlller.
            </remarks>
            <visibility>internal</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2013-10-15  AS00122  v0.00.00.122  Initial Version
            2014-03-18  AS00203  v0.00.00.203  Moved to Henooh.Utility.Native Namespace
            2014-04-14  AS00230  v0.00.00.230  Moved to HenoohUtility as a Class Library Project (dll)
            2015-04-02  AS00420  v0.00.04.000  Moved to HenoohInputSimulator Project
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2015-11-19  AS00568  v1.00.01.009  Changed the access modifier for KeyboardFlag to internal
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-10-18  AS00753  v1.00.03.039  Added visibility xml tag
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            </revisionhistory>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.KeyboardFlag.ExtendedKey">
            <summary>
            KEYEVENTF_EXTENDEDKEY = 0x0001 (If specified, the scan code was preceded by a prefix byte that has the value 0xE0 (224).)
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.KeyboardFlag.KeyUp">
            <summary>
            KEYEVENTF_KEYUP = 0x0002 (If specified, the key is being released. If not specified, the key is being pressed.)
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.KeyboardFlag.Unicode">
            <summary>
            KEYEVENTF_UNICODE = 0x0004 (If specified, wScan identifies the key and wVk is ignored.)
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.KeyboardFlag.ScanCode">
            <summary>
            KEYEVENTF_SCANCODE = 0x0008 (Windows 2000/XP: If specified, the system synthesizes a VK_PACKET keystroke. 
            The wVk parameter must be zero. This flag can only be combined with the KEYEVENTF_KEYUP flag. 
            For more information, see the Remarks section.)
            </summary>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.KeyPressEventArgsExt">
            <summary>
             KeyboardPressEventArgsExt Provides extended data for the <see cref='E:Henooh.DeviceEmulator.KeyboardObserver.KeyPress'/> event.
             </summary>
             <remarks>
             KeyboardPressEventArgsExt extends features from System.Windows.Forms.KeyPressEventArgs.
             </remarks>
             <visibility>internal</visibility>
             <revisionhistory>
             YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
             ==========  =======  ============  ============================================================================
             2015-04-29  AS00447  v0.00.04.013  Initial Version
             2015-05-07  AS00453  v0.00.04.017  Renamed the Class from KeyboardHookListener to KeyboardObserver
             2015-05-21  AS00459  v0.00.04.023  Removed dependency on KeyboardHookStruct and use KEYBDINPUT instead
             2015-05-28  AS00462  v0.00.04.024  Replace KeyboardHookStruct with KEYBDINPUT structure 
             2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
             2015-11-04  AS00554  v1.00.00.005  Changed access modifier to internal for the class
             2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
             2015-11-16  AS00565  v1.00.01.006  Removed static modifier from the class and methods
             2015-11-18  AS00568  v1.00.01.008  Modified remarks
             2016-01-16  AS00601  v1.00.03.000  Fixed a bug that threw null exception
             2016-02-16  AS00624  v1.00.03.003  Replaced tabs with spaces
             2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
             2016-10-08  AS00743  v1.00.03.032  Use IntPtr for wParam instead of int
             2016-10-11  AS00746  v1.00.03.033  Renamed the class KEYBDINPUT to KeybdInput
             2016-10-16  AS00751  v1.00.03.038  Follow Henooh style guidelines on Property casing, added xml headers
             2016-10-19  AS00754  v1.00.03.040  Added comments to Keyboard property and CreateNonChar method
             2016-10-20  AS00755  v1.00.03.041  Added visibility xml tags
             2016-11-26  AS00781  v1.00.05.002  Removed unused using directives
             2017-03-14  AS00851  v1.00.06.013  Changed the timestamp to become int instead of uint type
             2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
             2019-03-11  AS01156  v1.01.03.007  Resolve IDE0017 and IDE0018 messages and simplify
             2019-04-22  AS01182  v1.01.04.009  Resolve CA1305 by provding CultureInfo on Convert method
             2019-04-23  AS01183  v1.01.04.010  Resolve CA1822 by adding static prefix to CreateNonChar method
             2019-04-24  AS01184  v1.01.04.011  Resolve CA1811 by adding static prefix to FromRawDataGlobal and App methods
             2019-10-30  AS01244  v1.01.04.019  Remove Keyboard property as the class has been converted to static methods
             </revisionhistory>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.KeyPressEventArgsExt.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the KeyPressEventArgsExt class.
            </summary>
            <param name="keyChar">
            Character corresponding to the key pressed. 
            0 char if represens a system or functional non char key.
            </param>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.KeyPressEventArgsExt.CreateNonChar">
            <summary>
            Method called when a key is released.
            </summary>
            <returns></returns>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.KeyPressEventArgsExt.FromRawData(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Creates <see cref="T:Henooh.DeviceEmulator.Native.KeyPressEventArgsExt"/> from Windows Message parameters.
            </summary>
            <param name="wParam">The first Windows Message parameter.</param>
            <param name="lParam">The second Windows Message parameter.</param>
            <param name="isGlobal">Specifies if the hook is local or global.</param>
            <returns>A new KeyPressEventArgsExt object.</returns>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.KeyPressEventArgsExt.FromRawDataApp(System.IntPtr,System.IntPtr)">
            <summary>
            Creates <see cref="T:Henooh.DeviceEmulator.Native.KeyPressEventArgsExt"/> from Windows Message parameters,
            based upon a local application hook.
            </summary>
            <param name="wParam">The first Windows Message parameter.</param>
            <param name="lParam">The second Windows Message parameter.</param>
            <returns>A new KeyPressEventArgsExt object.</returns>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.KeyPressEventArgsExt.FromRawDataGlobal(System.IntPtr,System.IntPtr)">
            <summary>
            Creates <see cref="T:Henooh.DeviceEmulator.Native.KeyPressEventArgsExt"/> from Windows Message parameters,
            based upon a system-wide hook.
            </summary>
            <param name="wParam">The first Windows Message parameter.</param>
            <param name="lParam">The second Windows Message parameter.</param>
            <returns>A new KeyPressEventArgsExt object.</returns>
            <visibility>internal</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.KeyPressEventArgsExt.IsNonChar">
            <summary>
            True if represents a system or functional non char key.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.KeyPressEventArgsExt.Timestamp">
            <summary>
            The system tick count of when the event occured.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.KeyEventArgsExt">
            <summary>
             KeyEventArgsExt Provides extended argument data for the <see cref='E:Henooh.DeviceEmulator.KeyboardObserver.KeyDown'/> or <see cref='E:Henooh.DeviceEmulator.KeyboardObserver.KeyUp'/> event.
             </summary>
             <remarks>
             KeyboardEventArgsExt extends features from System.Windows.Forms.KeyEventArgs.
             </remarks>
             <revisionhistory>
             YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
             ==========  =======  ============  ============================================================================
             2015-04-29  AS00447  v0.00.04.013  Initial Version
             2015-05-07  AS00453  v0.00.04.017  Renamed the Class from KeyboardHookListener to KeyboardObserver
             2015-05-28  AS00462  v0.00.04.024  Replace KeyboardHookStruct with KEYBDINPUT structure 
             2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
             2015-11-04  AS00554  v1.00.00.005  Changed access modifier to internal for the class
             2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
             2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
             2016-07-13  AS00693  v1.00.03.018  Modified remarks
             2016-10-08  AS00743  v1.00.03.032  Use IntPtr for wParam instead of int
             2016-10-20  AS00755  v1.00.03.041  Added xml comment header on the internal consturctor
             2016-11-26  AS00781  v1.00.05.002  Removed unused using directives
             2017-02-18  AS00836  v1.00.06.009  Change the type of timestamp to int from uint
             2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
             </revisionhistory>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.KeyEventArgsExt.#ctor(System.Windows.Forms.Keys)">
            <summary>
            Initializes a new instance of the <see cref="T:Henooh.DeviceEmulator.Native.KeyEventArgsExt"/> class.
            </summary>
            <param name="keyData"></param>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.KeyEventArgsExt.#ctor(System.Windows.Forms.Keys,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Constructor that accepts values to be initialized.
            </summary>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.KeyEventArgsExt.FromRawData(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Creates <see cref="T:Henooh.DeviceEmulator.Native.KeyEventArgsExt"/> from Windows Message parameters.
            </summary>
            <param name="wParam">The first Windows Message parameter.</param>
            <param name="lParam">The second Windows Message parameter.</param>
            <param name="isGlobal">Specifies if the hook is local or global.</param>
            <returns>A new KeyEventArgsExt object.</returns>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.KeyEventArgsExt.FromRawDataApp(System.IntPtr,System.IntPtr)">
            <summary>
            Creates <see cref="T:Henooh.DeviceEmulator.Native.KeyEventArgsExt"/> from Windows Message parameters, based upon
            a local application hook.
            </summary>
            <param name="wParam">The first Windows Message parameter.</param>
            <param name="lParam">The second Windows Message parameter.</param>
            <returns>A new KeyEventArgsExt object.</returns>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.KeyEventArgsExt.FromRawDataGlobal(System.IntPtr,System.IntPtr)">
            <summary>
            Creates <see cref="T:Henooh.DeviceEmulator.Native.KeyEventArgsExt"/> from Windows Message parameters, based upon
            a system-wide hook.
            </summary>
            <param name="wParam">The first Windows Message parameter.</param>
            <param name="lParam">The second Windows Message parameter.</param>
            <returns>A new KeyEventArgsExt object.</returns>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.KeyEventArgsExt.Timestamp">
            <summary>
            The system tick count of when the event occured.
            </summary> 
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.KeyEventArgsExt.IsKeyDown">
            <summary>
            True if event singnals key down..
            </summary>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.KeyEventArgsExt.IsKeyUp">
            <summary>
            True if event singnals key up.
            </summary>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.Messages">
            <summary>
             Provides message that is provided with mouse and keboard actions.
             </summary>
             <remarks>
             Values are from Winuser.h in Microsoft SDK
             </remarks>
             <visibility>internal</visibility>
             <revisionhistory>
             YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
             ==========  =======  ============  ============================================================================
             2015-04-29  AS00447  v0.00.04.013  Initial Version
             2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
             2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
             2015-11-16  AS00565  v1.00.01.006  Removed static modifier for the Messages class
             2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
             2016-10-16  AS00751  v1.00.03.038  Modified all access properties to fields as internal
             2016-10-20  AS00755  v1.00.03.041  Added visibility xml tags
             2016-11-26  AS00781  v1.00.05.002  Removed unused using directives
             2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
             </revisionhistory>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. 
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_MBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is posted when the user presses the mouse wheel. 
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_XBUTTONDOWN">
            <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X mouse button. 
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_XBUTTONUP">
            <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X  mouse button.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_XBUTTONDBLCLK">
            <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X mouse button.
            </summary>
            <remarks>Only windows that have the CS_DBLCLKS style can receive WM_XBUTTONDBLCLK messages.</remarks>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem 
            key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem 
            key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, 
            or a keyboard key that is pressed when a window has the keyboard focus.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user 
            presses the F10 key (which activates the menu bar) or holds down the ALT key and then 
            presses another key. It also occurs when no window currently has the keyboard focus; 
            in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that 
            receives the message can distinguish between these two contexts by checking the context 
            code in the lParam parameter. 
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.Messages.WM_SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user 
            releases a key that was pressed while the ALT key was held down. It also occurs when no 
            window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent 
            to the active window. The window that receives the message can distinguish between 
            these two contexts by checking the context code in the lParam parameter. 
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.MouseEventExtArgs">
            <summary>
            Provides extended data for System.Windows.Forms.MouseEventArgs.
            </summary>
            <remarks>
            MouseEventExtArgs.cs class allows MouseEvents to be triggered.
            </remarks>
            <visibility>internal</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2015-04-30  AS00448  v0.00.04.014  Initial Version
            2015-05-12  AS00456  v0.00.04.020  Use Point struct from System.Drawing.Point
            2015-08-24  AS00512  v0.00.04.052  Modified summary and remarks to represent this class
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-04  AS00554  v1.00.00.005  Changed access modifier to internal for the class
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2015-11-23  AS00573  v1.00.01.010  Removed public property Point
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-10-08  AS00743  v1.00.03.032  Use IntPtr for wParam instead of int
            2016-10-20  AS00755  v1.00.03.041  Added visibility xml tags, modified access modifiers of methods to internal
            2016-11-26  AS00781  v1.00.05.002  Removed unused using directives
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            </revisionhistory>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.MouseEventExtArgs.FromRawData(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Creates <see cref="T:Henooh.DeviceEmulator.Native.MouseEventExtArgs"/> from Windows Message parameters.
            </summary>
            <param name="wParam">The first Windows Message parameter.</param>
            <param name="lParam">The second Windows Message parameter.</param>
            <param name="isGlobal">Specifies if the hook is local or global.</param>
            <returns>A new MouseEventExtArgs object.</returns>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.MouseEventExtArgs.FromRawDataApp(System.IntPtr,System.IntPtr)">
            <summary>
            Creates <see cref="T:Henooh.DeviceEmulator.Native.MouseEventExtArgs"/> from Windows Message parameters, 
            based upon a local application hook.
            </summary>
            <param name="wParam">The first Windows Message parameter.</param>
            <param name="lParam">The second Windows Message parameter.</param>
            <returns>A new MouseEventExtArgs object.</returns>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.MouseEventExtArgs.FromRawDataGlobal(System.IntPtr,System.IntPtr)">
            <summary>
            Creates <see cref="T:Henooh.DeviceEmulator.Native.MouseEventExtArgs"/> from Windows Message parameters, 
            based upon a system-wide global hook.
            </summary>
            <param name="wParam">The first Windows Message parameter.</param>
            <param name="lParam">The second Windows Message parameter.</param>
            <returns>A new MouseEventExtArgs object.</returns>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.MouseEventExtArgs.FromRawDataUniversal(System.IntPtr,Henooh.DeviceEmulator.Native.MouseStruct)">
            <summary>
            Creates <see cref="T:Henooh.DeviceEmulator.Native.MouseEventExtArgs"/> from relevant mouse data. 
            </summary>
            <param name="wParam">First Windows Message parameter.</param>
            <param name="mouseInfo">A MouseStruct containing information from which to contruct MouseEventExtArgs.</param>
            <returns>A new MouseEventExtArgs object.</returns>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.MouseEventExtArgs.#ctor(System.Windows.Forms.MouseButtons,System.Int32,System.Drawing.Point,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Henooh.DeviceEmulator.Native.MouseEventExtArgs"/> class. 
            </summary>
            <param name="buttons">One of the MouseButtons values indicating which mouse button was pressed.</param>
            <param name="clicks">The number of times a mouse button was pressed.</param>
            <param name="point">The x and y -coordinate of a mouse click, in pixels.</param>
            <param name="delta">A signed count of the number of detents the wheel has rotated.</param>
            <param name="timestamp">The system tick count when the event occured.</param>
            <param name="isMouseKeyDown">True if event singnals mouse button down.</param>
            <param name="isMouseKeyUp">True if event singnals mouse button up.</param>
            <visibility>internal</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.MouseEventExtArgs.Handled">
            <summary>
            Set this property to <b>true</b> inside your event handler to prevent further processing of the event in other applications.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.MouseEventExtArgs.WheelScrolled">
            <summary>
            True if event contains information about wheel scroll.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.MouseEventExtArgs.Clicked">
            <summary>
            True if event signals a click. False if it was only a move or wheel scroll.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.MouseEventExtArgs.IsMouseKeyDown">
            <summary>
            True if event singnals mouse button down.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.MouseEventExtArgs.IsMouseKeyUp">
            <summary>
            True if event singnals mouse button up.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.Native.MouseEventExtArgs.Timestamp">
            <summary>
            The system tick count of when the event occured.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.MouseFlag">
            <summary>
            Contains information about a simulated mouse event.
            </summary>
            <remarks>
            The set of MouseFlags for use in the Flags property of the <see cref="T:Henooh.DeviceEmulator.Native.MouseInput"/> structure. 
            (See: http://msdn.microsoft.com/en-us/library/ms646273(VS.85).aspx)
            </remarks>
            <visibility>internal</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2013-10-15  AS00122  v0.00.00.122  Initial Version
            2014-03-18  AS00203  v0.00.00.203  Moved to Henooh.Utility.Native Namespace
            2014-04-14  AS00230  v0.00.00.230  Moved to HenoohUtility as a Class Library Project (dll)
            2015-04-02  AS00420  v0.00.04.000  Moved to HenoohInputSimulator Project
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-04  AS00554  v1.00.00.005  Changed access modifier to internal for the class
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2015-11-23  AS00573  v1.00.01.010  Modified summary and remarks section
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-10-11  AS00746  v1.00.03.033  Renamed the class from MOUSEINPUT under cref in remarks
            2016-10-19  AS00754  v1.00.03.040  Added visibility xml tag
            2017-02-25  AS00842  v1.00.06.011  Follow Henooh Style Guidelines to not exceed 120 characters
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            </revisionhistory>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseFlag.Move">
            <summary>
            Specifies that movement occurred.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseFlag.LeftDown">
            <summary>
            Specifies that the left button was pressed.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseFlag.LeftUp">
            <summary>
            Specifies that the left button was released.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseFlag.RightDown">
            <summary>
            Specifies that the right button was pressed.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseFlag.RightUp">
            <summary>
            Specifies that the right button was released.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseFlag.MiddleDown">
            <summary>
            Specifies that the middle button was pressed.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseFlag.MiddleUp">
            <summary>
            Specifies that the middle button was released.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseFlag.XDown">
            <summary>
            Windows 2000/XP: Specifies that an X button was pressed.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseFlag.XUp">
            <summary>
            Windows 2000/XP: Specifies that an X button was released.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseFlag.VerticalWheel">
            <summary>
            Windows NT/2000/XP: Specifies that the wheel was moved, if the mouse has a wheel.
            The amount of movement is specified in mouseData. 
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseFlag.HorizontalWheel">
            <summary>
            Specifies that the wheel was moved horizontally, if the mouse has a wheel.
            The amount of movement is specified in mouseData. Windows 2000/XP:  Not supported.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseFlag.VirtualDesk">
            <summary>
            Windows 2000/XP: Maps coordinates to the entire desktop. Must be used with MOUSEEVENTF_ABSOLUTE.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseFlag.Absolute">
            <summary>
            Specifies that the dx and dy members contain normalized absolute coordinates.
            If the flag is not set, dxand dy contain relative data
            (the change in position since the last reported position).
            This flag can be set, or not set, regardless of what kind of mouse or other pointing device,
            if any, is connected to the system. For further information about relative mouse motion,
            see the following Remarks section.
            </summary>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.MouseInput">
            <summary>
            Contains information about a simulated mouse event.
            </summary>
            <remarks>
            The MOUSEINPUT structure contains information about a simulated mouse event. 
            (see: http://msdn.microsoft.com/en-us/library/ms646273(VS.85).aspx)
            Declared in Winuser.h, include Windows.h
            
            If the mouse has moved, indicated by MOUSEEVENTF_MOVE, dx and dy specify information about that movement. 
            The information is specified as absolute or relative integer values. 
            If MOUSEEVENTF_ABSOLUTE value is specified, dx and dy contain normalized absolute coordinates 
            between 0 and 65,535. The event procedure maps these coordinates onto the display surface. Coordinate (0,0) 
            maps onto the upper-left corner of the display surface; coordinate (65535,65535) maps onto the lower-right 
            corner. In a multimonitor system, the coordinates map to the primary monitor. 
            Windows 2000/XP: If MOUSEEVENTF_VIRTUALDESK is specified, the coordinates map to the entire virtual desktop.
            If the MOUSEEVENTF_ABSOLUTE value is not specified, dx and dy specify movement relative to the previous 
            mouse event (the last reported position). Positive values mean the mouse moved right (or down); 
            negative values mean the mouse moved left (or up). 
            Relative mouse motion is subject to the effects of the mouse speed and the two-mouse threshold values. 
            A user sets these three values with the Pointer Speed slider of the Control Panel's Mouse Properties sheet. 
            You can obtain and set these values using the SystemParametersInfo function. 
            The system applies two tests to the specified relative mouse movement. If the specified distance along either 
            the x or y axis is greater than the first mouse threshold value, and the mouse speed is not zero, the system 
            doubles the distance. If the specified distance along either the x or y axis is greater than the second mouse 
            threshold value, and the mouse speed is equal to two, the system doubles the distance that resulted from 
            applying the first threshold test. It is thus possible for the system to multiply specified relative mouse 
            movement along the x or y axis by up to four times.
            </remarks>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2013-10-15  AS00122  v0.00.00.122  Initial Version
            2014-03-18  AS00203  v0.00.00.203  Moved to Henooh.Utility.Native Namespace
            2014-04-14  AS00230  v0.00.00.230  Moved to HenoohUtility as a Class Library Project (dll)
            2015-04-02  AS00420  v0.00.04.000  Moved to HenoohInputSimulator Project
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-04  AS00554  v1.00.00.005  Changed access modifier to internal for the struct
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2015-11-23  AS00573  v1.00.01.010  Modified summary and remarks
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-10-11  AS00746  v1.00.03.033  Renamed the class from MOUSEINPUT
            2016-10-20  AS00755  v1.00.03.041  Modified public fields to internal fields, Follow Henooh Style Guidelines
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            2019-10-24  AS01242  v1.01.04.018  Resolve IDE0048 by Simplify the type name of fields
            </revisionhistory>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseInput.X">
            <summary>
            Specifies the absolute position of the mouse, or the amount of motion since the last mouse event was 
            generated, depending on the value of the dwFlags member. Absolute data is specified as the x coordinate 
            of the mouse; relative data is specified as the number of pixels moved. 
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseInput.Y">
            <summary>
            Specifies the absolute position of the mouse, or the amount of motion since the last mouse event was 
            generated, depending on the value of the dwFlags member. Absolute data is specified as the y coordinate 
            of the mouse; relative data is specified as the number of pixels moved. 
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseInput.MouseData">
            <summary>
            If dwFlags contains MOUSEEVENTF_WHEEL, then mouseData specifies the amount of wheel movement. 
            A positive value indicates that the wheel was rotated forward, away from the user; a negative value 
            indicates that the wheel was rotated backward, toward the user. One wheel click is defined as 
            WHEEL_DELTA, which is 120. 
            Windows Vista: If dwFlags contains MOUSEEVENTF_HWHEEL, then dwData specifies the amount of wheel 
            movement. A positive value indicates that the wheel was rotated to the right; a negative value 
            indicates that the wheel was rotated to the left. One wheel click is defined as WHEEL_DELTA, 
            which is 120.
            Windows 2000/XP: IfdwFlags does not contain MOUSEEVENTF_WHEEL, MOUSEEVENTF_XDOWN, or MOUSEEVENTF_XUP, 
            then mouseData should be zero. 
            If dwFlags contains MOUSEEVENTF_XDOWN or MOUSEEVENTF_XUP, then mouseData specifies which X buttons 
            were pressed or released. This value may be any combination of the following flags. 
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseInput.Flags">
            <summary>
            A set of bit flags that specify various aspects of mouse motion and button clicks. The bits in this 
            member can be any reasonable combination of the following values. 
            The bit flags that specify mouse button status are set to indicate changes in status, not ongoing 
            conditions. For example, if the left mouse button is pressed and held down, MOUSEEVENTF_LEFTDOWN is 
            set when the left button is first pressed, but not for subsequent motions. Similarly, 
            MOUSEEVENTF_LEFTUP is set only when the button is first released. 
            You cannot specify both the MOUSEEVENTF_WHEEL flag and either MOUSEEVENTF_XDOWN or MOUSEEVENTF_XUP 
            flags simultaneously in the dwFlags parameter, because they both require use of the mouseData field. 
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseInput.Time">
            <summary>
            Time stamp for the event, in milliseconds. If this parameter is 0, the system will provide its own 
            time stamp. 
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseInput.ExtraInfo">
            <summary>
            Specifies an additional value associated with the mouse event. An application calls GetMessageExtraInfo 
            to obtain this extra information. 
            </summary>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.MouseKeybdHardwareInput">
            <summary>
            Provides combined/overlayed structure that includes Mouse, Keyboard and Hardware Input message data.
            </summary>
            <remarks>
            MOUSEKEYBDHARDWAREINPUT is struct layout of Mouse, Keyboard and Hardware Input message data.
            (see: http://msdn.microsoft.com/en-us/library/ms646270(VS.85).aspx)
            </remarks>
            <visibility>internal</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2013-10-15  AS00122  v0.00.00.122  Initial Version
            2014-03-18  AS00203  v0.00.00.203  Moved to Henooh.Utility.Native Namespace
            2014-04-14  AS00230  v0.00.00.230  Moved to HenoohUtility as a Class Library Project (dll)
            2015-04-02  AS00420  v0.00.04.000  Moved to HenoohInputSimulator Project
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-04  AS00554  v1.00.00.005  Changed access modifier to internal for the struct
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-07-13  AS00693  v1.00.03.018  Modified summary and remarks
            2016-10-11  AS00746  v1.00.03.033  Renamed the class to MouseKeybdHardwareInput, and fields to CamelCasing
            2016-10-19  AS00754  v1.00.03.040  Modified access modifier to fields to internal
            2016-10-20  AS00755  v1.00.03.041  Added visibility xml tags
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            2019-03-26  AS01161  v1.01.03.008  Resolve CA1823 by adding struct ToString override
            </revisionhistory>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseKeybdHardwareInput.Mouse">
            <summary>
            The <see cref="T:Henooh.DeviceEmulator.Native.MouseInput"/> definition.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseKeybdHardwareInput.Keyboard">
            <summary>
            The <see cref="T:Henooh.DeviceEmulator.Native.KeybdInput"/> definition.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseKeybdHardwareInput.Hardware">
            <summary>
            The <see cref="T:Henooh.DeviceEmulator.Native.HardwareInput"/> definition.
            </summary>
            <visibility>internal</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.MouseKeybdHardwareInput.ToString">
            <summary>
            Provide string output of the <see cref="T:Henooh.DeviceEmulator.Native.MouseKeybdHardwareInput"/> content.
            </summary>
            <returns></returns>
            <visibility>public</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.MouseStruct">
            <summary>
            Provides extended data for the MouseClickExt and MouseMoveExt events. 
            </summary>
            <remarks>
            MouseStruct contains structure of mouse
            </remarks>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2015-04-30  AS00448  v0.00.04.014  Initial Version
            2015-05-12  AS00456  v0.00.04.020  Use Point struct from System.Drawing.Point
            2015-08-18  AS00509  v0.00.04.050  Correct File name under remark as MouseStructures
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-07-13  AS00693  v1.00.03.018  Renamed the file to match the struct name
            2016-11-26  AS00781  v1.00.05.002  Removed unused using directives
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            2019-03-11  AS01156  v1.01.03.007  Resolve IDE0017, Object initialization can be simplified
            2019-10-24  AS01242  v1.01.04.018  Resolve IDE0048 by Simplify the type name of fields
            </revisionhistory>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseStruct.Point">
            <summary>
            Specifies a Point structure that contains the X- and Y-coordinates of the cursor, in screen coordinates. 
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseStruct.MouseData">
            <summary>
            Specifies information associated with the message.
            </summary>
            <remarks>
            The possible values are:
            <list type="bullet">
            <item>
            <description>0 - No Information</description>
            </item>
            <item>
            <description>1 - X-Button1 Click</description>
            </item>
            <item>
            <description>2 - X-Button2 Click</description>
            </item>
            <item>
            <description>120 - Mouse Scroll Away from User</description>
            </item>
            <item>
            <description>-120 - Mouse Scroll Toward User</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.MouseStruct.Timestamp">
            <summary>
            Returns a Timestamp associated with the input, in System Ticks.
            </summary>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.AppMouseStruct">
            <summary>
            The AppMouseStruct structure contains information about a application-level mouse input event.
            </summary>
            <remarks>
            See full documentation at http://globalmousekeyhook.codeplex.com/wikipage?title=MouseStruct
            </remarks>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.AppMouseStruct.Point">
            <summary>
            Specifies a Point structure that contains the X- and Y-coordinates of the cursor, in screen coordinates. 
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.AppMouseStruct.MouseData">
            <summary>
            Specifies information associated with the message.
            </summary>
            <remarks>
            The possible values are:
            <list type="bullet">
            <item>
            <description>0 - No Information</description>
            </item>
            <item>
            <description>1 - X-Button1 Click</description>
            </item>
            <item>
            <description>2 - X-Button2 Click</description>
            </item>
            <item>
            <description>120 - Mouse Scroll Away from User</description>
            </item>
            <item>
            <description>-120 - Mouse Scroll Toward User</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Henooh.DeviceEmulator.Native.AppMouseStruct.ToMouseStruct">
            <summary>
            Converts the current <see cref="T:Henooh.DeviceEmulator.Native.AppMouseStruct"/> into a <see cref="T:Henooh.DeviceEmulator.Native.MouseStruct"/>.
            </summary>
            <returns></returns>
            <remarks>
            The AppMouseStruct does not have a timestamp, thus one is generated at the time of this call.
            </remarks>
        </member>
        <member name="T:Henooh.DeviceEmulator.Native.VirtualKeyCode">
            <summary>
            The following enumeration shows the symbolic constant names, hexadecimal values, and mouse or keyboard
            equivalents for the virtual-key codes used by the system. Thoe codes are listed in numeric order.
            </summary>
            <remarks>
            Original source of Virtual-Key Codes: http://msdn.microsoft.com/en-us/library/dd375731(VS.85).aspx
            </remarks>
            <visibility>public</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2013-10-15  AS00122  v0.00.00.122  Initial Version
            2014-03-18  AS00203  v0.00.00.203  Moved to Henooh.Utility.Native Namespace
            2014-04-14  AS00230  v0.00.00.230  Moved to HenoohUtility as a Class Library Project (dll)
            2015-04-02  AS00420  v0.00.04.000  Moved to HenoohInputSimulator Project
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2015-11-12  AS00562  v1.00.01.004  Modified the summary and remarks section
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-10-19  AS00754  v1.00.03.040  Added visibility xml tag
            2017-09-02  AS00906  v1.01.00.002  Added comments to OEM_7 key, which is different between US and UK keyboard
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            2019-03-25  AS01160  v1.01.03.008  Resolved CA1028, changing the underlying type of the enum
            </revisionhistory>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.None">
            <summary>
            No value.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.LBUTTON">
            <summary>
            Left mouse button
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.RBUTTON">
            <summary>
            Right mouse button
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.CANCEL">
            <summary>
            Control-break processing
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.MBUTTON">
            <summary>
            Middle mouse button (three-button mouse) - NOT contiguous with LBUTTON and RBUTTON
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.XBUTTON1">
            <summary>
            Windows 2000/XP: X1 mouse button - NOT contiguous with LBUTTON and RBUTTON
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.XBUTTON2">
            <summary>
            Windows 2000/XP: X2 mouse button - NOT contiguous with LBUTTON and RBUTTON
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.BACK">
            <summary>
            BACKSPACE key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.TAB">
            <summary>
            TAB key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.CLEAR">
            <summary>
            CLEAR key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.RETURN">
            <summary>
            ENTER key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.SHIFT">
            <summary>
            SHIFT key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.CONTROL">
            <summary>
            CTRL key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.MENU">
            <summary>
            ALT key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.PAUSE">
            <summary>
            PAUSE key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.CAPITAL">
            <summary>
            CAPS LOCK key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.KANA">
            <summary>
            Input Method Editor (IME) Kana mode
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.HANGEUL">
            <summary>
            IME Hanguel mode (maintained for compatibility; use HANGUL)
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.HANGUL">
            <summary>
            IME Hangul mode
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.JUNJA">
            <summary>
            IME Junja mode
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.FINAL">
            <summary>
            IME final mode
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.HANJA">
            <summary>
            IME Hanja mode
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.KANJI">
            <summary>
            IME Kanji mode
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.ESCAPE">
            <summary>
            ESC key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.CONVERT">
            <summary>
            IME convert
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.NONCONVERT">
            <summary>
            IME nonconvert
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.ACCEPT">
            <summary>
            IME accept
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.MODECHANGE">
            <summary>
            IME mode change request
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.SPACE">
            <summary>
            SPACEBAR
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.PRIOR">
            <summary>
            PAGE UP key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.NEXT">
            <summary>
            PAGE DOWN key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.END">
            <summary>
            END key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.HOME">
            <summary>
            HOME key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.LEFT">
            <summary>
            LEFT ARROW key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.UP">
            <summary>
            UP ARROW key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.RIGHT">
            <summary>
            RIGHT ARROW key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.DOWN">
            <summary>
            DOWN ARROW key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.SELECT">
            <summary>
            SELECT key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.PRINT">
            <summary>
            PRINT key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.EXECUTE">
            <summary>
            EXECUTE key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.SNAPSHOT">
            <summary>
            PRINT SCREEN key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.INSERT">
            <summary>
            INS key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.DELETE">
            <summary>
            DEL key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.HELP">
            <summary>
            HELP key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_0">
            <summary>
            0 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_1">
            <summary>
            1 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_2">
            <summary>
            2 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_3">
            <summary>
            3 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_4">
            <summary>
            4 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_5">
            <summary>
            5 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_6">
            <summary>
            6 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_7">
            <summary>
            7 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_8">
            <summary>
            8 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_9">
            <summary>
            9 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_A">
            <summary>
            A key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_B">
            <summary>
            B key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_C">
            <summary>
            C key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_D">
            <summary>
            D key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_E">
            <summary>
            E key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_F">
            <summary>
            F key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_G">
            <summary>
            G key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_H">
            <summary>
            H key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_I">
            <summary>
            I key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_J">
            <summary>
            J key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_K">
            <summary>
            K key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_L">
            <summary>
            L key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_M">
            <summary>
            M key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_N">
            <summary>
            N key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_O">
            <summary>
            O key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_P">
            <summary>
            P key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_Q">
            <summary>
            Q key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_R">
            <summary>
            R key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_S">
            <summary>
            S key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_T">
            <summary>
            T key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_U">
            <summary>
            U key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_V">
            <summary>
            V key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_W">
            <summary>
            W key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_X">
            <summary>
            X key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_Y">
            <summary>
            Y key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VK_Z">
            <summary>
            Z key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.LWIN">
            <summary>
            Left Windows key (Microsoft Natural keyboard)
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.RWIN">
            <summary>
            Right Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.APPS">
            <summary>
            Applications key (Natural keyboard)
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.SLEEP">
            <summary>
            Computer Sleep key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.NUMPAD0">
            <summary>
            Numeric keypad 0 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.NUMPAD1">
            <summary>
            Numeric keypad 1 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.NUMPAD2">
            <summary>
            Numeric keypad 2 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.NUMPAD3">
            <summary>
            Numeric keypad 3 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.NUMPAD4">
            <summary>
            Numeric keypad 4 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.NUMPAD5">
            <summary>
            Numeric keypad 5 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.NUMPAD6">
            <summary>
            Numeric keypad 6 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.NUMPAD7">
            <summary>
            Numeric keypad 7 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.NUMPAD8">
            <summary>
            Numeric keypad 8 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.NUMPAD9">
            <summary>
            Numeric keypad 9 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.MULTIPLY">
            <summary>
            Multiply key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.ADD">
            <summary>
            Add key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.SEPARATOR">
            <summary>
            Separator key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.SUBTRACT">
            <summary>
            Subtract key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.DECIMAL">
            <summary>
            Decimal key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.DIVIDE">
            <summary>
            Divide key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F1">
            <summary>
            F1 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F2">
            <summary>
            F2 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F3">
            <summary>
            F3 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F4">
            <summary>
            F4 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F5">
            <summary>
            F5 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F6">
            <summary>
            F6 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F7">
            <summary>
            F7 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F8">
            <summary>
            F8 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F9">
            <summary>
            F9 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F10">
            <summary>
            F10 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F11">
            <summary>
            F11 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F12">
            <summary>
            F12 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F13">
            <summary>
            F13 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F14">
            <summary>
            F14 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F15">
            <summary>
            F15 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F16">
            <summary>
            F16 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F17">
            <summary>
            F17 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F18">
            <summary>
            F18 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F19">
            <summary>
            F19 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F20">
            <summary>
            F20 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F21">
            <summary>
            F21 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F22">
            <summary>
            F22 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F23">
            <summary>
            F23 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.F24">
            <summary>
            F24 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.NUMLOCK">
            <summary>
            NUM LOCK key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.SCROLL">
            <summary>
            SCROLL LOCK key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.LSHIFT">
            <summary>
            Left SHIFT key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.RSHIFT">
            <summary>
            Right SHIFT key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.LCONTROL">
            <summary>
            Left CONTROL key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.RCONTROL">
            <summary>
            Right CONTROL key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.LMENU">
            <summary>
            Left MENU key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.RMENU">
            <summary>
            Right MENU key - Used only as parameters to GetAsyncKeyState() and GetKeyState()
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.BROWSER_BACK">
            <summary>
            Windows 2000/XP: Browser Back key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.BROWSER_FORWARD">
            <summary>
            Windows 2000/XP: Browser Forward key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.BROWSER_REFRESH">
            <summary>
            Windows 2000/XP: Browser Refresh key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.BROWSER_STOP">
            <summary>
            Windows 2000/XP: Browser Stop key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.BROWSER_SEARCH">
            <summary>
            Windows 2000/XP: Browser Search key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.BROWSER_FAVORITES">
            <summary>
            Windows 2000/XP: Browser Favorites key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.BROWSER_HOME">
            <summary>
            Windows 2000/XP: Browser Start and Home key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VOLUME_MUTE">
            <summary>
            Windows 2000/XP: Volume Mute key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VOLUME_DOWN">
            <summary>
            Windows 2000/XP: Volume Down key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.VOLUME_UP">
            <summary>
            Windows 2000/XP: Volume Up key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.MEDIA_NEXT_TRACK">
            <summary>
            Windows 2000/XP: Next Track key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.MEDIA_PREV_TRACK">
            <summary>
            Windows 2000/XP: Previous Track key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.MEDIA_STOP">
            <summary>
            Windows 2000/XP: Stop Media key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.MEDIA_PLAY_PAUSE">
            <summary>
            Windows 2000/XP: Play/Pause Media key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.LAUNCH_MAIL">
            <summary>
            Windows 2000/XP: Start Mail key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.LAUNCH_MEDIA_SELECT">
            <summary>
            Windows 2000/XP: Select Media key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.LAUNCH_APP1">
            <summary>
            Windows 2000/XP: Start Application 1 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.LAUNCH_APP2">
            <summary>
            Windows 2000/XP: Start Application 2 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.OEM_1">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the ';:' key 
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.OEM_PLUS">
            <summary>
            Windows 2000/XP: For any country/region, the '+' key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.OEM_COMMA">
            <summary>
            Windows 2000/XP: For any country/region, the ',' key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.OEM_MINUS">
            <summary>
            Windows 2000/XP: For any country/region, the '-' key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.OEM_PERIOD">
            <summary>
            Windows 2000/XP: For any country/region, the '.' key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.OEM_2">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '/?' key 
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.OEM_3">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '`~' key 
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.OEM_4">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '[{' key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.OEM_5">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the '\|' key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.OEM_6">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. Windows 2000/XP: For the US standard keyboard, the ']}' key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.OEM_7">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard. 
            Windows 2000/XP: For the US standard keyboard, the 'single-quote/double-quote' key.
            For the United Kingdom Keyboard, the 'single-quote / @ ' key.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.OEM_8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.OEM_102">
            <summary>
            Windows 2000/XP: Either the angle bracket key or the backslash key on the RT 102-key keyboard
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.PROCESSKEY">
            <summary>
            Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.PACKET">
            <summary>
            Windows 2000/XP: Used to pass Unicode characters as if they were keystrokes. The PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.ATTN">
            <summary>
            Attn key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.CRSEL">
            <summary>
            CrSel key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.EXSEL">
            <summary>
            ExSel key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.EREOF">
            <summary>
            Erase EOF key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.PLAY">
            <summary>
            Play key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.ZOOM">
            <summary>
            Zoom key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.NONAME">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.PA1">
            <summary>
            PA1 key
            </summary>
        </member>
        <member name="F:Henooh.DeviceEmulator.Native.VirtualKeyCode.OEM_CLEAR">
            <summary>
            Clear key
            </summary>
        </member>
        <member name="T:Henooh.DeviceEmulator.A_NamespaceDoc">
             <summary>
             The Henooh.DeviceEmulator namespace provides a simple .NET (C#) interface to emulate Keyboard and Mouse input
             and status. Input classes are called Controllers and Status classes are called Observers.
             </summary>
             <remarks>
             Using Windows Forms or Windows WPF SendKey methods can emulate text entry, but not actual key strokes.
             Other available input simulators or emulators lack ability to send key strokes that is behind DirectX layers,
             and rarely provides output features as one package. HenoohDeviceEmulator provides easy way to gain hardware
             access to Keyboard and Mouse devices, both input and output. Henooh Device Emulator is composed of four
             separate classes each designed to handle their own functionality.
             <dl class="dl-horizontal">
             <dt>KeyboardController</dt>
             <dd>Provides Keyboard Controlling features (Control SendInput to keyboard device)</dd>
             <dt>MouseController</dt>
             <dd>Provides Mouse Input features (Control SendInput to mouse device)</dd>
             <dt>KeyboardObserver</dt>
             <dd>Provides Keyboard Observing features (Receive events from a keyboard device)</dd>
             <dt>MouseObserver</dt>
             <dd>Provides Mouse Observing features (Receive events from a mouse device)</dd>
             </dl>
            
             What's new in v1.1.7 of Henooh.DeviceEmulator.
             <list type="bullet">
             <item>Move method uses the relative positioning to give realistic mouse movements.</item>
             </list>
             
             What's new in v1.1.6 of Henooh.DeviceEmulator.
             <list type="bullet">
             <item>Fixed a bug that the resource libraries are added as content.</item>
             </list>
             
             What's new in v1.1.5 of Henooh.DeviceEmulator.
             <list type="bullet">
             <item>Fixed an with null parameters in Keyboard.Controller.</item>
             </list>
             
             What's new in v1.1.4 of Henooh.DeviceEmulator.
             <list type="bullet">
             <item>Introduce RunMode, when set to 4, supresses SendInput.</item>
             </list>
             
             What's new in v1.01.03 of Henooh.DeviceEmulator.
             <ul>
             <li>Rename the namespace to Henooh.DeviceEmulator.</li>
             </ul>
             
             What's new in v1.01.02 of HenoohDeviceEmulator.
             <ul>
             <li>Press method on KeyboardController emulates repeated key presses of a physical keyboard device.</li>
             </ul>
             
             What's new in v1.01.01 of HenoohDeviceEmulator.
             <ul>
             <li>Added support for United Kingdom keyboard layout.</li>
             </ul>
             
             What's new in v1.01.00 of HenoohDeviceEmulator.
             <ul>
             <li>Fixed a bug that throws exception on observers when system uptime exceeds 24.5 days.</li>
             </ul>
             
             What's New in v1.00.06 of HenoohDeviceEmulator.
             <ul>
             <li>MouseController now handles two types of coordinate system based on scaling.</li>
             <li>Added PhysicalToLogicalPoint method in MouseController.</li>
             <li>Added LogicalToPhysicalPoint method in MouseController.</li>
             <li>Added ShowAllScreenInfo method in MouseController.</li>
             <li>Added LeftRightClickHold method in MouseController.</li>
             </ul>
             
             What's New in v1.00.05 of HenoohDeviceEmulator.
             <ul>
             <li>Supports CancellationToken for KeyboardController and MouseController.</li>
             <li>Added Sleep() method, which responds to CancellationToken.</li>
             </ul>
            
             What's New in v1.00.04 of HenoohDeviceEmulator.
             <ul>
             <li>Added Press() method in KeyboardController - designate time delay between KeyDown and KeyUp</li>
             <li>Added code samples to documentation - specifically to describe how to use Observers</li>
             <li>Rewrote Dispose methods to properly dispose.</li>
             <li>Optimized classes and native methods to be compatible with more hardware.</li>
             <li>Improved comments and examples throughout many classes and methods.</li>
             </ul>
             </remarks>
             <revisionhistory>
             YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
             ==========  =======  ============  ============================================================================
             2015-10-30  AS00549  v1.00.00.002  Initial Version
             2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
             2015-11-03  AS00553  v1.00.00.004  Modified the summary and remarks
             2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
             2015-11-07  AS00557  v1.00.01.000  New Release with project renamed and full documentation
             2015-11-11  AS00574  v1.00.01.011  Use description tags available in bootstrap to describe Namespace
             2016-01-10  AS00595  v1.00.02.000  Added default constructors, better documentations and general clean up
             2016-01-16  AS00601  v1.00.03.000  Fixed a bug that threw an exception with KeyboardObserver
             2016-02-23  AS00627  v1.00.03.004  Enable XML documentation generation for Debug
             2016-03-27  AS00656  v1.00.03.011  Removed Native.XButton.cs file
             2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
             2016-07-29  AS00697  v1.00.03.020  Modified remarks with up to date information in v1.00.04
             2016-10-23  AS00758  v1.00.04.000  New release to 1.00.04.000
             2016-10-24  AS00759  v1.00.04.001  Quick bug fix - in 1.00.04.000 - Released as 1.00.04.001
             2016-11-20  AS00781  v1.00.04.010  Removed unused using directives
             2016-11-22  AS00783  v1.00.04.011  Modified remarks in prepration of v1.00.05 release
             2016-11-23  AS00784  v1.00.05.000  New release to 1.00.05.000
             2016-12-10  AS00801  v1.00.05.008  Update remarks in prepration changes in 1.00.06 release
             2016-12-17  AS00803  v1.00.05.009  Update remarks in prepration changes in 1.00.06 release
             2016-12-29  AS00806  v1.00.06.000  New release to 1.00.06.000
             2017-02-18  AS00836  v1.00.06.009  Update remarks with critical changes
             2017-08-10  AS00892  v1.01.00.000  New release to 1.01.00.000
             2017-09-03  AS00907  v1.01.01.000  New release to 1.01.01.000
             2017-10-14  AS00935  v1.01.01.002  Added description to the AssemblyInfo
             2018-01-06  AS00975  v1.01.02.000  New release to 1.01.02.000
             2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
             2018-04-05  AS01042  v1.01.03.000  New release to 1.01.03.000
             2018-05-30  AS01070  v1.01.03.001  Change the AssemblyName to Henooh.DeviceEmulator
             2018-06-06  AS01074  v1.01.03.002  Modify the summary
             2019-03-28  AS01163  v1.01.04.000  New release to v1.1.4
             2019-04-11  AS01175  v1.01.04.005  Rename the class to A_NamespaceDoc
             2019-04-19  AS01181  v1.01.04.008  Use Microsoft.CodeAnalysis.FxCopAnalyzers v2.9.2 from Nuget
             2019-04-22  AS01182  v1.01.04.009  Add abstract prefix to class
             2019-08-09  AS01212  v1.01.04.015  Use Microsoft.CodeAnalysis.FxCopAnalyzers v2.9.4 from Nuget
             2019-08-12  AS01214  v1.01.04.016  Add a res/values/strings.resx resource file, set the neutural language
             2019-11-07  AS01246  v1.01.04.020  Update the summary
             2019-11-09  AS01247  v1.01.05.000  New release to v1.1.5
             2020-02-22  AS01286  v1.01.06.000  New release to v1.1.6 was not recorded in revision history
             </revisionhistory>
        </member>
        <member name="T:Henooh.DeviceEmulator.KeyboardController">
             <summary>
             Provides a mechanism to emulate sending commands to physical keyboard device by calling methods.
             </summary>
             <remarks>
             KeyboardController class offers ability to control and keyboard devices.
             In order to use KeyboardController, create an instance by using a constructor.
             Then in order to emulate controlling the keyboard, call the methods.
             </remarks>
             <example>
             Keyboard Controller Usage
             <code>
             using Henooh.DeviceEmulator.Native;
            
             // Use Keyboard Controller to type.
             public void TypeHelloWorld()
             {
                 // Initalize KeyboardController.
                 KeyboardController kb = new KeyboardController();
             
                 // Simulate typing using Type() method.
                 kb.TypeString("Hello World!");
                 kb.Enter();
                
                 // Simulate typing key by key
                 kb.Shift(VirtualKeyCode.VK_H);
                 kb.Type(VirtualKeyCode.VK_E);
                 kb.Type(VirtualKeyCode.VK_L);
                 kb.Type(VirtualKeyCode.VK_L);
                 kb.Type(VirtualKeyCode.VK_O);
                 kb.Type(VirtualKeyCode.RETURN);
             }
             </code>
             </example>
             <visibility>public</visibility>
             <revisionhistory>
             YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
             ==========  =======  ============  ============================================================================
             2011-09-29  AS00000  v0.00.00.000  Initial Version
             2012-07-31  AS00000  v0.00.00.000  Ported C++ version to C# version
             2012-08-01  AS00000  v0.00.00.000  Uses VirtualKeyCode variable instead of integer
             2012-10-25  AS00000  v0.00.00.000  Added more keys to virtual code
             2013-02-01  AS00000  v0.00.00.000  Added control method to simulate control press
             2013-02-12  AS00000  v0.00.00.000  Made the keyboard inputs directX compatable
             2013-02-13  AS00000  v0.00.00.000  Added shift method to simulate shift press
             2013-03-26  AS00002  v0.00.00.002  Revision History Update - renamed method type to Press and text to Type
             2013-04-19  AS00011  v0.00.00.011  Added '/' key for citrixUpdateScript
             2013-07-08  AS00057  v0.00.00.057  Added ',' ';' ':' keys
             2013-10-02  AS00115  v0.00.00.115  Renamed to HenoohKeyboard
             2013-10-10  AS00120  v0.00.00.120  PressEnter method added
             2014-03-06  AS00192  v0.00.00.192  PressDelay method added which waits a bit after typing
             2014-03-18  AS00203  v0.00.00.203  Moved HenoohKeyboard to Henooh.Utility and resolve Native
             2014-04-08  AS00224  v0.00.00.224  Changed the class to be Public
             2014-04-14  AS00230  v0.00.00.230  Moved to HenoohUtility as a Class Library Project (dll)
             2015-03-08  AS00397  v0.00.03.006  Added Window method to simulate window press
             2015-03-09  AS00398  v0.00.03.007  Fixed the issue where pressing Window Key did not work
             2015-03-13  AS00402  v0.00.03.009  Enable Brackets, Question Marks and Enter for typing text
             2015-03-16  AS00404  v0.00.03.010  Fixed an issue where keys are being passed to DirectX applications
             2015-03-19  AS00407  v0.00.03.011  Renamed PressEnter method to Enter
             2015-04-02  AS00419  v0.00.03.012  Changed name from HenoohKeyboard to MiniKeyboard
             2015-04-02  AS00420  v0.00.04.000  Moved to HenoohInputSimulator Project
             2015-04-13  AS00433  v0.00.04.005  Added more keys available to convert from VirtualKeyCode
             2015-04-14  AS00435  v0.00.04.006  Added F11, F12, F13, F14 and F15 Keys to Convert from VirtualKeyCode
             2015-04-15  AS00436  v0.00.04.007  Added japanese Keys to Convert in VirtualKeyCode
             2015-05-05  AS00451  v0.00.04.015  Renamed HenoohKeyboard to KeyboardController
             2015-05-06  AS00452  v0.00.04.016  Added in longer delays after pressing Shift button
             2015-07-07  AS00485  v0.00.04.033  Modified the summary to say KeyboardController
             2015-07-22  AS00494  v0.00.04.040  Remove dependency on NativeMethods
             2015-08-05  AS00502  v0.00.04.044  Made couple of methods not used obsolete
             2015-08-06  AS00503  v0.00.04.045  Added Alt and Window methods
             2015-08-11  AS00504  v0.00.04.046  PressDelay method will now use TimeSpan paramter instead of int
             2015-08-12  AS00505  v0.00.04.047  Added more keys to Convert method
             2015-08-13  AS00506  v0.00.04.048  Removed obsolete methods
             2015-08-14  AS00507  v0.00.04.049  Included NaturalTypingFlag as an option when setting KeyboardController
             2015-08-19  AS00510  v0.00.04.051  Remove consoleDebug field from KeyboardController class
             2015-10-25  AS00544  v1.00.00.000  Now available on nuget.org
             2015-10-28  AS00547  v1.00.00.001  Simplified the summary, modified the remarks and added paragraphing
             2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
             2015-11-04  AS00554  v1.00.00.005  Added sealed modifier to the class
             2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
             2015-11-07  AS00556  v1.00.00.007  Updated comments and renamed few methods
             2015-11-09  AS00559  v1.00.01.001  Updated documentation under examples, made NaturalTypingFlag to public
             2015-11-13  AS00563  v1.00.01.005  Changed accessor modifier for Convert method to private from public
             2015-11-18  AS00568  v1.00.01.008  Modified summary comments
             2016-01-09  AS00594  v1.00.01.012  Added comments and better comments
             2016-02-16  AS00624  v1.00.03.003  Replaced tabs with spaces
             2016-03-01  AS00634  v1.00.03.008  Resolved XML comment warning with param tag
             2016-03-02  AS00635  v1.00.03.009  Follow Henooh Style Guideline with parameter casing for IsExtendedKey method
             2016-03-29  AS00658  v1.00.03.013  Modified example to follow Henooh Style Guidelines
             2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
             2016-07-13  AS00693  v1.00.03.018  Implemented Press method, added more examples
             2016-08-19  AS00709  v1.00.03.021  Removed unused using statements
             2016-08-29  AS00716  v1.00.03.022  Derive from Abstract BaseController class
             2016-09-30  AS00735  v1.00.03.029  Use SendInput from SafeNativeMethods class
             2016-10-11  AS00746  v1.00.03.033  Add visibility xml tags, Renamed KEYBDINPUT to KeybdInput, INPUT to Input
             2016-10-15  AS00750  v1.00.03.037  Moved inputBuffer and inputList to BaseController
             2016-10-19  AS00754  v1.00.03.040  Corrected grammar on all comments with third person singular
             2016-10-30  AS00765  v1.00.04.003  Implement CancellationToken on BaseController
             2016-11-04  AS00769  v1.00.04.006  Use Sleep method from Native instead of Thread.Sleep
             2016-11-13  AS00775  v1.00.04.008  Modified comment on constructor to have see cref reference
             2016-11-15  AS00777  v1.00.04.009  Enable NaturalTypingFlag for CancellationToken constructor
             2016-11-22  AS00783  v1.00.04.011  Added comments to CancellationToken constructor
             2016-12-04  AS00795  v1.00.05.004  Modified XML comments for constructors
             2017-01-31  AS00829  v1.00.06.007  Modify example code comments to have correct grammar
             2017-06-03  AS00889  v1.00.06.014  Object initialization simplified
             2017-09-03  AS00907  v1.01.01.000  Support for United Kingdom Keyboard Layout
             2017-09-10  AS00912  v1.01.01.001  Add support for OEM_102 Key
             2017-12-16  AS00968  v1.01.01.005  Press method has been modified to send multiple Down SendInputs
             2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
             2018-04-03  AS01040  v1.01.02.003  Replace Console.WriteLine with Trace.WriteLine
             2019-01-25  AS01141  v1.01.03.004  Modify the summary of the XML comments for the constructors
             2019-03-27  AS01162  v1.01.03.010  Implement RunMode and suppress SendInput being sent
             2019-04-03  AS01167  v1.01.04.003  Implement VirtualKeyCodeDictionary, providing a look up table
             2019-04-04  AS01168  v1.01.04.004  VirtualKeyCodeDictionary is initalized on the constructor
             2019-04-18  AS01179  v1.01.04.006  Use the VirtualKeyCodeDictionary to return Converted Key types
             2019-04-22  AS01182  v1.01.04.009  Resolve CA1305 by using the Culture settings
             2019-04-23  AS01183  v1.01.04.010  Resolve CA1822 by adding static prefix to IsExtendedKey method
             2019-04-24  AS01184  v1.01.04.011  Resolve CA1806 by assigning the result to a variable
             2019-08-08  AS01210  v1.01.04.014  Check for null in TypeString method
             2019-08-19  AS01220  v1.01.04.017  Rearrange the layout, fixed a bug with CancellationToken constructor
             2019-10-30  AS01244  v1.01.04.019  TypeString method will now construct list of virtual Keys to be pressed
             </revisionhistory>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Henooh.DeviceEmulator.KeyboardController"/> with no arguments.
            </summary>
            <example>
            <code>
            // Initialize KeyboardController.
            KeyboardController kb = new KeyboardController();
            </code>
            </example>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardController.#ctor(System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Henooh.DeviceEmulator.KeyboardController"/> with 
            <see cref="T:System.Threading.CancellationToken"/> as a parameter.
            </summary>
            <param name="aCancellationToken"></param>
            <visibility>public</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.KeyboardController.VirtualKeyCodeDictionary">
            <summary>
            Provides a dictionary of Virtual Key Code and SendInput key values.
            </summary>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardController.InitializeVirtualKeyCodeDictionary">
            <summary>
            Initializes the <see cref="P:Henooh.DeviceEmulator.KeyboardController.VirtualKeyCodeDictionary"/> property.
            </summary>
        </member>
        <member name="P:Henooh.DeviceEmulator.KeyboardController.NaturalTypingFlag">
            <summary>
            Provides getter and setter to NaturalTypingFlag property, which emulates an add delay between 
            KeyDown and KeyUp Events, giving the controller a natural emulation of keyboard usage.
            </summary>
            <example>
            <code>
            // Set Keyboard to emulate typing naturally.
            public void AllowNaturalTyping()
            {
                kb.NaturalTypingFlag = true;
            }
            </code>
            </example>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardController.Convert(Henooh.DeviceEmulator.Native.VirtualKeyCode)">
            <summary>
            Converts VirtualKeyCodes to Scan flag to use for DirectX compatable keys.
            </summary>
            <param name="aKeyCode">VirtualKeyCode of the key code to obtain scan code</param>
            <returns>UInt16 for scan code</returns>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardController.Down(Henooh.DeviceEmulator.Native.VirtualKeyCode)">
            <summary>
            Emulates a Key Down event. For sequences of events, try using Type or TypeString methods instead.
            </summary>
            <param name="aKeyCode">VirtualKeyCode of key to be pressed down</param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardController.Up(Henooh.DeviceEmulator.Native.VirtualKeyCode)">
            <summary>
            Emulates a Key Up event. For sequences of events, try using Type or TypeString methods instead.
            </summary>
            <param name="aKeyCode">VirtualKeyCode of the key to be released</param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardController.Type(Henooh.DeviceEmulator.Native.VirtualKeyCode)">
            <summary>
            Emulates a Typing action. Type emulates Key Down and Key Up sequence for a single key.
            </summary>
            <example>
            <code>
            // Type hello henooh
            public void TypeHelloHenooh()
            {
                Type(VirtualKeyCode.VK_H);
                Type(VirtualKeyCode.VK_E);
                Type(VirtualKeyCode.VK_L);
                Type(VirtualKeyCode.VK_L);
                Type(VirtualKeyCode.VK_O);
                Type(VirtualKeyCode.SPACE);
                Type(VirtualKeyCode.VK_H);
                Type(VirtualKeyCode.VK_E);
                Type(VirtualKeyCode.VK_N);
                Type(VirtualKeyCode.VK_O);
                Type(VirtualKeyCode.VK_O);   
                Type(VirtualKeyCode.VK_H);  
            }
            </code>
            </example>
            <param name="aKeyCode"></param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardController.TypeDelay(Henooh.DeviceEmulator.Native.VirtualKeyCode,System.TimeSpan)">
            <summary>
            Emulates a keyboard key down and up followed by a delay.
            </summary>
            <param name="aKeyCode"></param>
            <param name="aTimeSpan"></param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardController.Press(Henooh.DeviceEmulator.Native.VirtualKeyCode,System.TimeSpan)">
            <summary>
            Emulates a keyboard key down, followed by a delay and a keyboard key up.
            To specify Key Down and Key Up actions naturally, just use Type method.
            </summary>
            <param name="aKeyCode"></param>
            <param name="aTimeSpan"></param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardController.Enter">
            <summary>
            Emulates pressing return/enter key.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardController.TypeString(System.String)">
            <summary>
            Emulates typing a text string.
            </summary>
            <example>
            <code>
            // Type Hello Henooh!
            public void TypeHelloHenooh()
            {
                string toType = "Hello Henooh!";
                TypeString(toType);
            }
            </code>
            </example>
            <param name="aText">string of text</param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardController.IsExtendedKey(Henooh.DeviceEmulator.Native.VirtualKeyCode)">
            <summary>
            Provides if a key is an Extended Key.
            </summary>
            <param name="aKeyCode"></param>
            <returns></returns>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardController.Control(Henooh.DeviceEmulator.Native.VirtualKeyCode)">
            <summary>
            Emulates control presses like Ctrl-C, Ctrl-V.
            </summary>
            <example>
            <code>
            // Copy and Paste
            KeyboardController kb = new KeyboardController();
            kb.Control(VirtualKeyCode.VK_C);
            kb.Control(VirtualKeyCode.VK_V);
            </code>
            </example>
            <param name="aKeyCode">VirtualKeyCode to be pressed with control</param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardController.Shift(Henooh.DeviceEmulator.Native.VirtualKeyCode)">
            <summary>
            Emulates shift presses like Shift-4.
            </summary>
            <example>
            <code>
            // Type $40
            KeyboardController kb = new KeyboardController();
            kb.Shift(VirtualKeyCode.VK_4);
            kb.Type(VirtualKeyCode.VK_4);
            kb.Type(VirtualKeyCode.VK_0);
            </code>
            </example>
            <param name="aKeyCode">VirtualKeyCode to be pressed with shift</param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardController.Alt(Henooh.DeviceEmulator.Native.VirtualKeyCode)">
            <summary>
            Emulates combination Alt-Key Presses.
            </summary>
            <example>
            <code>
            // Close a Window.
            KeyboardController kb = new KeyboardController();
            kb.Alt(VirtualKeyCode.F4);
            </code>
            </example>
            <param name="aKeyCode"></param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardController.Window(Henooh.DeviceEmulator.Native.VirtualKeyCode)">
            <summary>
            Emulates combination Window-Key Presses.
            </summary>
            <example>
            <code>
            // Bring up Run window.
            KeyboardController kb = new KeyboardController();
            kb.Window(VirtualKeyCode.VK_R);
            </code>
            </example>
            <param name="aKeyCode"></param>
            <visibility>public</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.MouseController">
            <summary>
            Provides a mechanism to emulate sending commands to pysical mouse device by calling methods.
            </summary>
            <remarks>
            MouseController class offers ability to control and mouse devices.
            In order to use MouseController, create an instance by using a constructor.
            Then in order to emulate controlling the mouse, call the methods.
            </remarks>
            <example>
            Mouse Controller Usage
            <code>
            // Use Mouse Controller to Move to certain coordinate on desktop.
            public void MoveMouse()
            {
                // Initalize MouseController.
                MouseController mouse = new MouseController();
            
                // Emulate movement of the mouse.
                mouse.Move(new System.Drawing.Point(100, 100));
            }
            </code>
            </example>
            <visibility>public</visibility>
            <revisionhistory>
            YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
            ==========  =======  ============  ============================================================================
            2011-09-29  AS00000  v0.00.00.000  Initial Version
            2012-01-14  AS00000  v0.00.00.000  Moved wheeldown and wheelup to public functions
            2012-07-26  AS00000  v0.00.00.000  Ported C++ version to C# version
            2013-02-01  AS00000  v0.00.00.000  Added Point based calls for mouse movements
            2013-03-26  AS00002  v0.00.00.002  Revision History Update - renamed methods to follow standard format
            2013-04-07  AS00007  v0.00.00.007  Added middle mouse button features
            2013-06-14  AS00040  v0.00.00.040  More natural mouse movements, increased base iterations, Move() method
            2013-06-15  AS00041  v0.00.00.041  Move will ensure the mouse will move to the final destination
            2013-10-02  AS00115  v0.00.00.115  Added comments, renamed class and clean up code
            2013-10-15  AS00122  v0.00.00.122  GetCursorBitmap method implemented
            2013-10-21  AS00127  v0.00.00.127  GetCursorHash method returns the hash code of current cursor
            2014-02-28  AS00185  v0.00.00.185  Added MoveClickDelay methods
            2014-03-12  AS00200  v0.00.00.200  Updated ConsoleDebug variable as a public variable with getter and setter
            2014-03-18  AS00203  v0.00.00.203  Moved HenoohMouse to Henooh.Utility namespace
            2014-03-23  AS00210  v0.00.00.210  Properly dispose cursor Bitmap after calculating hash value
            2014-04-05  AS00222  v0.00.00.222  CaptureBitmap now handles rare exceptions thrown in System.Drawing.dll
            2014-04-08  AS00224  v0.00.00.224  Changed the class to be Public
            2014-04-14  AS00230  v0.00.00.230  Moved to HenoohUtility as a Class Library Project (dll)
            2014-04-17  AS00233  v0.00.00.233  MoveDelayClick method added and restore functionality of GetCursorHash
            2014-06-25  AS00261  v0.00.01.027  Redefined summary
            2014-08-31  AS00287  v0.00.01.053  Redefined mouse cursor to PrimaryMonitorSize
            2014-10-06  AS00311  v0.00.03.000  Removed dependency of HenoohVision, moved GetCursor methods to HenoohVision
            2014-10-22  AS00312  v0.00.03.001  Fixed a bug in MoveClickDelay method
            2015-03-19  AS00407  v0.00.03.011  Changed Input Parameters for DragDrop
            2015-04-02  AS00419  v0.00.03.012  Changed name from HenoohMouse to MiniMouse
            2015-04-02  AS00420  v0.00.04.000  Moved to HenoohInputSimulator Project
            2015-04-06  AS00424  v0.00.04.001  Removed all Debug features
            2015-04-07  AS00426  v0.00.04.002  Change default value for Move parameters
            2015-04-08  AS00427  v0.00.04.003  Added MoveRelative methods and standardized movementVelocityLogFactor
            2015-04-11  AS00431  v0.00.04.004  Changed paramter for time from integer to TimeSpan
            2015-04-21  AS00439  v0.00.04.008  Implemented new method called MoveDelayClick
            2015-04-22  AS00440  v0.00.04.009  Added comments with MoveDelayClick methods
            2015-04-24  AS00442  v0.00.04.010  SendInput extern is now a private static method, overloaded AbsoluteMove
            2015-04-27  AS00444  v0.00.04.011  Changed the aMovementVelocityLogFactor where 0 is the lowest speed
            2015-05-06  AS00452  v0.00.04.016  Renamed HenoohMouse to MouseController
            2015-07-14  AS00489  v0.00.04.035  Modified the file name under remarks
            2015-07-22  AS00494  v0.00.04.040  Remove dependency on NativeMethods
            2015-10-25  AS00544  v1.00.00.000  Now available on nuget.org
            2015-10-28  AS00547  v1.00.00.001  Simplified the summary, modified the remarks and added paragraphing
            2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
            2015-11-04  AS00554  v1.00.00.005  Added sealed modifier to the class
            2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
            2015-11-09  AS00559  v1.00.01.001  Added example and modified the remarks section
            2015-11-10  AS00560  v1.00.01.002  Modified summary of all methods for better documentation
            2015-11-11  AS00561  v1.00.01.003  Fixed a bug that missed a semi-colon
            2016-02-28  AS00632  v1.00.03.006  Fix XML Comment warnings
            2016-03-08  AS00641  v1.00.03.010  Fixed few methods to follow Henooh Style Guidelines
            2016-03-28  AS00657  v1.00.03.012  Modified name of parameters to follow Henooh Style Guidelines
            2016-03-29  AS00658  v1.00.03.013  Modified example to follow Henooh Style Guidelines
            2016-04-02  AS00661  v1.00.03.014  Created a private method called SendMouseInput, a common input
            2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
            2016-04-07  AS00666  v1.00.03.016  Corrected some grammar in code example and method comments
            2016-08-19  AS00709  v1.00.03.021  Removed unused using statements
            2016-08-29  AS00716  v1.00.03.022  Derive from Abstract BaseController class
            2016-09-30  AS00735  v1.00.03.029  Use SendInput from SafeNativeMethods class
            2016-10-11  AS00746  v1.00.03.033  Add visibility xml tags, renamed class INPUT to Input
            2016-10-13  AS00748  v1.00.03.035  Modified comments inside the methods
            2016-10-15  AS00750  v1.00.03.037  Moved inputBuffer and inputList to BaseController
            2016-10-19  AS00754  v1.00.03.040  Corrected grammar on all comments
            2016-10-24  AS00759  v1.00.04.001  Fixed a bug that only sends LeftDown for SendMouseInput commands
            2016-10-29  AS00764  v1.00.04.002  Implement CancellationToken for MouseController
            2016-10-30  AS00765  v1.00.04.003  Implement CancellationToken on BaseController
            2016-11-02  AS00768  v1.00.04.005  Use Sleep method from Native instead of Thread.Sleep
            2016-11-09  AS00772  v1.00.00.032  Resolved XML comment for publicly visible type or member warning
            2016-11-20  AS00781  v1.00.04.010  Changed fields to properties, added access modifiers
            2016-11-22  AS00783  v1.00.04.011  Added comments to CancellationToken constructor
            2016-12-04  AS00795  v1.00.05.004  Modified XML comments for constructors
            2016-12-05  AS00796  v1.00.05.005  Implement Dpi Awareness methods
            2016-12-06  AS00797  v1.00.05.006  Remove code that is irrelevent, added implementation of PhysicalToLogical
            2016-12-09  AS00800  v1.00.05.007  Moved native class to SafeNativeMethods class, add XML header comments
            2016-12-10  AS00801  v1.00.05.008  Implement ShowDisplayInfo method, and added XML comments to added methods
            2016-12-17  AS00803  v1.00.05.009  Add LeftRightClickHold method
            2017-01-05  AS00808  v1.00.06.001  Add XButton, and click method now has an optional parameter
            2017-01-07  AS00810  v1.00.06.002  Add ButtonDown and ButtonUp methods
            2017-01-08  AS00811  v1.00.06.003  Made Down and Up methods obsolete, use new method with parameters instead
            2017-01-18  AS00818  v1.00.06.004  Click method rewritten to use MouseDown and MouseUp methods
            2017-01-21  AS00820  v1.00.06.005  Replace using obsolete methods to regular methods
            2017-01-26  AS00825  v1.00.06.006  Add XML comments to MouseDown and MouseUp methods
            2017-01-31  AS00829  v1.00.06.007  Add examples and visibility tags to some methods
            2017-08-09  AS00891  v1.00.06.015  Removed some methods from becoming obsolete, used ButtonDown methods
            2017-08-20  AS00897  v1.01.00.001  Resolve messages IDE0017 where Object initialization can be simplified
            2018-02-27  AS01011  v1.01.02.001  Delete obsolete methods, Added remarks for operations supported for Win 8.1
            2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
            2018-12-17  AS01131  v1.01.03.003  Add visibility tags to methods without them
            2019-01-25  AS01141  v1.01.03.004  Modify the summary of the XML comments for the constructors
            2019-03-27  AS01162  v1.01.03.010  Implement RunMode and suppress SendInput being sent
            2019-03-29  AS01164  v1.01.04.001  Resolve CA01026 by overriding click method
            2019-04-01  AS01166  v1.01.04.002  Resolve CA01026 by overriding ButtonDown and ButtonUp methods
            2019-04-18  AS01179  v1.01.04.006  Use discard for not using status from a native call
            2019-04-19  AS01180  v1.01.04.007  Resolve IDE0054 by using compound assignments
            2019-04-22  AS01182  v1.01.04.009  Replace System.Console with Trace
            2019-04-23  AS01183  v1.01.04.010  Add static prefix to few methods
            2019-04-24  AS01184  v1.01.04.011  Resolve CA1806 by assigning the result to a variable
            2019-05-02  AS01185  v1.01.04.012  Resolve IDE0059 by removing redundant assignments and values
            2019-08-06  AS01209  v1.01.04.013  Added two static methods that will return System.Windows.Points
            2019-08-08  AS01210  v1.01.04.014  Resolve IDE0059 by using Discard operation on AbsoluteMove method
            2019-11-15  AS01249  v1.01.05.001  Resolve CA1829 by using the Count property instead of Enumerable.Count
            2019-11-21  AS01251  v1.01.06.001  Resolve CA1829 by using the Count property instead of Enumerable.Count
            2019-11-27  AS01254  v1.01.06.002  Remove unused using statements
            </revisionhistory>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Henooh.DeviceEmulator.MouseController"/> with no arguments.
            </summary>
            <example>
            <code>
            // Initialize MouseController.
            MouseController mouse = new MouseController();
            </code>
            </example>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.#ctor(System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Henooh.DeviceEmulator.MouseController"/> with
            <see cref="T:System.Threading.CancellationToken"/> as a parameter.
            </summary>
            <param name="aCancellationToken"></param>
            <visibility>public</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.MouseController.DesktopWidth">
            <summary>
            Provides DesktopWidth to calculate dimensions of movable space.
            </summary>
            <visibility>private</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.MouseController.DesktopHeight">
            <summary>
            Provides DesktopHight to calculate dimensions of movable space.
            </summary>
            <visibility>private</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.MouseController.PhysicalToLogicalMoveMode">
            <summary>
            Provides if the coordinates to move mouse is based on physical location if set true,
            and based on logical location if set false.
            </summary>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.ShowDisplayInfo">
            <summary>
            Provides all Screen display information.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.SendMouseInput(System.UInt32,System.UInt32)">
            <summary>
            Provides a way to generate an inputBuffer and sends to native SendInput method.
            </summary>
            <param name="aMouseFlag"></param>
            <param name="aScrollAmount"></param>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.ButtonDown">
            <summary>
            Emulates pressing down on a mouse button.
            </summary>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.ButtonDown(Henooh.DeviceEmulator.Native.MouseButton)">
            <summary>
            Emulates pressing down on a mouse button.
            </summary>
            <param name="aMouseButton"></param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.ButtonUp">
            <summary>
            Emulates releasing up a mouse button.
            </summary>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.ButtonUp(Henooh.DeviceEmulator.Native.MouseButton)">
            <summary>
            Emulates releasing up a mouse button.
            </summary>
            <param name="aMouseButton"></param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.Click">
            <summary>
            Emulates clicking a mouse button.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.Click(Henooh.DeviceEmulator.Native.MouseButton)">
            <summary>
            Emulates clicking a mouse button.
            </summary>
            <param name="aMouseButton"></param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.LeftDown">
            <summary>
            Emulates pressing down on a left mouse button.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.LeftUp">
            <summary>
            Emulates releasing a left mouse button.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.RightDown">
            <summary>
            Emulates pressing down on a right mouse button.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.RightUp">
            <summary>
            Emulates releasing a right mouse button.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.MiddleDown">
            <summary>
            Emulates pressing down on a middle mouse button.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.MiddleUp">
            <summary>
            Emulates releasing a middle mouse button.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.WheelDown">
            <summary>
            Emulates scrolling down on a mouse wheel towards the user.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.WheelUp">
            <summary>
            Emulates scrolling up on a mouse wheel away from the user.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.PhysicalToLogicalPoint(System.Drawing.Point)">
            <summary>
            Converts physical point coordinates to logical point coordinates.
            </summary>
            <remarks>
            This method is supported on operating systems greater than Windows 8.1.
            </remarks>
            <param name="aPoint"></param>
            <returns></returns>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.PhysicalToLogicalPoint(System.Windows.Point)">
            <summary>
            Converts physical point coordinates to logical point coordinates.
            </summary>
            <remarks>
            This method is supported on operating systems greater than Windows 8.1.
            </remarks>
            <param name="aPoint">Accepts <see cref="T:System.Windows.Point"/> as a parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.LogicalToPhysicalPoint(System.Drawing.Point)">
            <summary>
            Converts logical point coordinates to physical point coordinates.
            </summary>
            <remarks>
            This method is supported on operating systems greater than Windows 8.1.
            </remarks>
            <param name="aPoint">Accepts <see cref="T:System.Drawing.Point"/> as a parameter.</param>
            <returns></returns>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.LogicalToPhysicalPoint(System.Windows.Point)">
            <summary>
            Converts logical point coordinates to physical point coordinates.
            </summary>
            <remarks>
            This method is supported on operating systems greater than Windows 8.1.
            </remarks>
            <param name="aPoint">Accepts <see cref="T:System.Windows.Point"/> as a parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.AbsoluteSinglePointMove(System.Int32,System.Int32)">
            <summary>
            Emulates instantly moving a cursor to an absolute position on the desktop using x and y coordinates.
            </summary>
            <param name="aX">integer value of x coordinate of cursor destination</param>
            <param name="aY">integer value of y coordinate of cursor destination</param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.RelativeMoveSendInput(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="aX"></param>
            <param name="aY"></param>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.AbsoluteSinglePointMove(System.Drawing.Point)">
            <summary>
            Emulates instantly moving a cursor to an absolute position on the desktop using System.Drawing.Point.
            </summary>
            <param name="aDestination">System.Drawing.Point method of a Destination</param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.Move(System.Int32,System.Int32,System.Int32)">
            <summary>
            Emulates moving the mouse cursor naturally as a relative position to the current position.
            </summary>
            <param name="aDestinationX"></param>
            <param name="aDestinationY"></param>
            <param name="aOffsetAccuracy"></param>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.AbsoluteMove(System.Int32,System.Int32,System.Double)">
            <summary>
            Emulates naturally moving a cursor to a position on the desktop.
            </summary>
            <param name="aDestinationX">integer value of x coordinate of cursor destination</param>
            <param name="aDestinationY">integer value of y coordinate of cursor destination</param>
            <param name="aMovementVelocityLogFactor">velocity of pixel displacement factor based on intervals</param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.Move(System.Drawing.Point,System.Int32)">
            <summary>
            Emulates naturally moving a cursor to a position on the desktop.
            </summary>
            <param name="aDestination">System.Drawing.Point coordinate of cursor destination</param>
            <param name="aOffsetAccuracy"></param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.MoveRelative(System.Int32,System.Int32,System.Int32)">
            <summary>
            Emulates movement by a relative position.
            </summary>
            <param name="aDisplacementX"></param>
            <param name="aDisplacementY"></param>
            <param name="aMovementVelocityLogFactor"></param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.MoveRelative(System.Drawing.Point,System.Int32)">
            <summary>
            Emulates movement by a relative position.
            </summary>
            <param name="aDisplacement"></param>
            <param name="aMovementVelocityLogFactor"></param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.MoveClick(System.Int32,System.Int32)">
            <summary>
            Emulates a natural mouse movement followed by a click.
            </summary>
            <param name="aDestinationX">integer value of x coordinate of cursor destination</param>
            <param name="aDestinationY">integer value of y coordinate of cursor destination</param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.MoveClick(System.Drawing.Point)">
            <summary>
            Emulates a natural mouse movement followed by a click.
            </summary>
            <param name="aPoint">point of coordinate of cursor destination</param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.MoveClickHold(System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Emulates a natural mouse movement, follow by left button down, and a delay, followed up with a release.
            </summary>
            <param name="aDestinationX"></param>
            <param name="aDestinationY"></param>
            <param name="aWaitPeriod"></param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.MoveClickHold(System.Drawing.Point,System.TimeSpan)">
            <summary>
            Emulates a natural mouse movement, follow by left button down, and a delay, followed up with a release.
            </summary>
            <param name="aPoint"></param>
            <param name="aWaitPeriod"></param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.LeftRightClickHold(System.TimeSpan)">
            <summary>
            Emulate a natural mouse down of left and right down button, and a delay, 
            </summary>
            <param name="aHoldPeriod"></param>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.MoveClickDelay(System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Emulates a natural mouse movement, follow by left button click and wait.
            </summary>
            <param name="aDestinationX"></param>
            <param name="aDestinationY"></param>
            <param name="aWaitPeriod"></param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.MoveClickDelay(System.Drawing.Point,System.TimeSpan)">
            <summary>
            Emulates a natural mouse movement, follow by left button click and wait.
            </summary>
            <param name="aPoint"></param>
            <param name="aWaitPeriod"></param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.MoveDelayClick(System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Emulates a natural mouse movement which includes a delay between move and click action.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="aWaitPeriod"></param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.MoveDelayClick(System.Drawing.Point,System.TimeSpan)">
            <summary>
            Emulates a natural mouse movement which includes a delay beetween move and click action.
            </summary>
            <param name="aPoint"></param>
            <param name="aWaitPeriod"></param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.DoubleClick">
            <summary>
            Emulates double clicking Left mouse button.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.MiddleClick">
            <summary>
            Emulates clicking Middle mouse button.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.RightClick">
            <summary>
            Emulates clicking Right mouse button.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.DragDrop(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Emulates a drag and drop motion.
            </summary>
            <param name="aOriginX">integer value of x coordinate of drag point</param>
            <param name="aOriginY">integer value of x coordinate of drag point</param>
            <param name="aDestinationX">integer value of x coordinate of drop destination</param>
            <param name="aDestinationY">integer value of x coordinate of drop destination</param>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseController.DragDrop(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Emulate a drag and drop motion.
            </summary>
            <param name="aFirstPoint"></param>
            <param name="aSecondPoint"></param>
            <visibility>public</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.KeyboardObserver">
            <summary>
             Provides a mechanism that will observe certain keyboard activities and return data to appropriate events.
             </summary>
             <remarks>
             KeyboardObserver allows observing Keyboard device with KeyUp and KeyDown events.
             </remarks>
             <example>
             Keyboard Observer Usage.
             <code>
             // Use Keyboard Observer to detect Global Keyboard Inputs.
             public void ObserveKeyboard()
             {
                 // Initialize KeyboardObserver.
                 HenoohDeviceEmulator.KeyboardObserver kbObserver = new HenoohDeviceEmulator.KeyboardObserver();
                 kbObserver.Enable = true;
                 // Bind a KeyDown event with a method
                 kbObserver.KeyDown += KeyboardObserver_KeyDown;
             }
            
             // Print the key that was pressed
             public void KeyboardObserver_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
             {
                 System.Console.WriteLine("KeyDown detected on " + e.KeyCode);
             }
             </code>
             </example>
             <visibility>public</visibility>
             <revisionhistory>
             YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
             ==========  =======  ============  ============================================================================
             2015-04-29  AS00447  v0.00.04.013  Initial Version
             2015-05-07  AS00453  v0.00.04.017  Renamed the Class from KeyboardHookListener to KeyboardObserver
             2015-05-11  AS00455  v0.00.04.019  Use renamed base class
             2015-06-03  AS00465  v0.00.04.027  Implement using wpf events instead of WinForms events
             2015-06-04  AS00466  v0.00.04.028  Implement changes to GlobalHooker to GlobalObserver
             2015-06-08  AS00468  v0.00.04.030  Renamed Hooker class to ObserverAbstract
             2015-06-09  AS00469  v0.00.04.031  Commented out code that could use System.Windows.Input to process inputs
             2015-07-08  AS00486  v0.00.04.034  Modified the summary and remarks to contain correct information
             2015-07-23  AS00495  v0.00.04.041  Use renamed class AppObserver
             2015-10-15  AS00538  v0.00.04.053  Hide WpfKeyDown and WpfKeyUp as they are not implemented
             2015-10-25  AS00544  v1.00.00.000  Now available on nuget.org
             2015-10-28  AS00547  v1.00.00.001  Simplified the summary
             2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
             2015-11-04  AS00554  v1.00.00.005  Added sealed modifier to the class
             2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
             2015-11-07  AS00556  v1.00.00.007  Renamed methods, modified the summary
             2015-11-09  AS00559  v1.00.01.001  Modify documentation
             2015-11-10  AS00560  v1.00.01.002  Added comments and made wpf versions obsolete
             2015-11-17  AS00566  v1.00.01.007  Added default constructor that uses GlobalObserver
             2015-11-18  AS00568  v1.00.01.008  Comments on a default constructor and modified comments
             2016-01-16  AS00601  v1.00.03.000  Fixed a bug that threw null exception
             2016-02-27  AS00631  v1.00.03.005  Fixed XML comments on KeyPress event
             2016-03-29  AS00658  v1.00.03.013  Added an example code to KeyboardObserver class
             2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
             2016-08-19  AS00709  v1.00.03.021  Removed unused using statements
             2016-09-21  AS00726  v1.00.03.026  Added obsolete attribute to Dispose method
             2016-09-24  AS00729  v1.00.03.028  Resolve XML comment warnings that point to older class name
             2016-10-02  AS00737  v1.00.03.031  Replace int with IntPtr for SafeNativeMethod calls
             2016-10-08  AS00743  v1.00.03.032  Use IntPtr for wParam instead of int
             2016-10-11  AS00746  v1.00.03.033  Added visibility xml tags, rewrite Dispose method
             2016-10-13  AS00748  v1.00.03.035  Modified example code in the header
             2016-11-20  AS00781  v1.00.04.010  Follow Henooh Style Guidelines to change properties to Camel casing
             2016-12-03  AS00794  v1.00.05.003  Summary of default constructor changed with proper see tags
             2016-12-04  AS00795  v1.00.05.004  Corrected style under KeyboardObserver constructor, added header XML comment
             2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
             2019-01-25  AS01141  v1.01.03.004  Modify the summary of the XML comments for the constructors
             2019-03-27  AS01162  v1.01.03.010  Removed method calling KeyEvent Wpf Extensions
             2019-10-24  AS01242  v1.01.04.018  Add visibility tag on Dispose method
             2019-10-30  AS01244  v1.01.04.019  Resolve IDE0052 by allowing an internal getter for KeyPressEventArgsExt
             2019-11-27  AS01254  v1.01.06.002  Remove unused using statements
             2020-02-22  AS01286  v1.01.06.003  Set the maximum character per line to be at 120 characters
             </revisionhistory>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardObserver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Henooh.DeviceEmulator.KeyboardObserver"/> derived from <see cref="T:Henooh.DeviceEmulator.Native.BaseObserver"/>.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardObserver.#ctor(Henooh.DeviceEmulator.Native.ObserverAbstract)">
            <summary>
            Initializes a new instance of the <see cref="T:Henooh.DeviceEmulator.KeyboardObserver"/> with <see cref="T:Henooh.DeviceEmulator.Native.ObserverAbstract"/>
            as a paramter.
            </summary>
            <param name="aObserver">
            Depending on this parameter the listener hooks either application or global keyboard events.
            </param>
            <remarks>
            Hooks are not active after instantiation. You need to use either <see cref="P:Henooh.DeviceEmulator.Native.BaseObserver.Enabled"/> 
            property or call <see cref="M:Henooh.DeviceEmulator.Native.BaseObserver.Start"/> method.
            </remarks>
            <visibility>public</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.KeyboardObserver.KeyPressEventArgsExt">
            <summary>
            Provides accessor to KeyPressEventArgsExt.
            </summary>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardObserver.ProcessCallback(System.IntPtr,System.IntPtr)">
            <summary>
            This method processes the data from the hook and initiates event firing.
            </summary>
            <param name="wParam">The first Windows Messages parameter.</param>
            <param name="lParam">The second Windows Messages parameter.</param>
            <returns>
            True - The hook will be passed along to other applications.
            <para>
            False - The hook will not be given to other applications, effectively blocking input.
            </para>
            </returns>
            <visibility>protected</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardObserver.GetHookId">
            <summary>
            Returns the correct hook id to be used for <see cref="M:Henooh.DeviceEmulator.Native.SafeNativeMethods.SetWindowsHookEx(System.Int32,Henooh.DeviceEmulator.Native.ObserverAbstract.HookCallback,System.IntPtr,System.Int32)"/> call.
            </summary>
            <returns>WH_KEYBOARD (0x02) or WH_KEYBOARD_LL (0x13) constant.</returns>
            <visibility>protected</visibility>
        </member>
        <member name="E:Henooh.DeviceEmulator.KeyboardObserver.KeyDown">
            <summary>
            Occurs when a key is pressed. 
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardObserver.InvokeKeyDown(Henooh.DeviceEmulator.Native.KeyEventArgsExt)">
            <summary>
            Windows Form version of InvokeKeyDown.
            </summary>
            <param name="e"></param>
            <visibility>private</visibility>
        </member>
        <member name="E:Henooh.DeviceEmulator.KeyboardObserver.KeyPress">
            <summary>
            Occurs when a key is pressed.
            </summary>
            <remarks>
            Key events occur in the following order: 
            <ol>
            <li>KeyDown</li>
            <li>KeyPress</li>
            <li>KeyUp</li>
            </ol>
            <para>
            The KeyPress event is not raised by noncharacter keys; however, the noncharacter keys do raise the KeyDown 
            and KeyUp events. Use the KeyChar property to sample keystrokes at run time and to consume or modify a
            subset of common keystrokes. To handle keyboard events only in your application and not enable other
            applications to receive keyboard events, set the <see cref="P:System.Windows.Forms.KeyPressEventArgs.Handled"/> property in your
            form's KeyPress event-handling method to <b>true</b>. 
            </para>
            </remarks>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardObserver.InvokeKeyPress(System.IntPtr,System.IntPtr)">
            <summary>
            Windows Form version of InvokeKeyPress.
            </summary>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardObserver.InvokeKeyPress(Henooh.DeviceEmulator.Native.KeyPressEventArgsExt)">
            <summary>
            Winforms version of InvokeKeyPress.
            </summary>
            <param name="e"></param>
            <visibility>private</visibility>
        </member>
        <member name="E:Henooh.DeviceEmulator.KeyboardObserver.KeyUp">
            <summary>
            Occurs when a key is released.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardObserver.InvokeKeyUp(Henooh.DeviceEmulator.Native.KeyEventArgsExt)">
            <summary>
            Winforms version of InvokeKeyUp.
            </summary>
            <param name="e"></param>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.KeyboardObserver.Dispose(System.Boolean)">
            <summary>
            Release delegates, Stop Observe, and dispose.
            </summary>
            <param name="aDisposing"></param>
            <visibility>protected</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.MouseObserver">
             <summary>
             Provides a mechanism that will observe certain mouse activities and return data to appropriate events.
             </summary>
             <remarks>
             MouseObserver allows observing Mouse device with Mouse related events.
             </remarks>
             <example>
             Mouse Observer Usage
             <code>
             // Use Mouse Observer to detect Global Mouse Inputs.
             public void ObserveMouse()
             {
                 HenoohDeviceEmulator.MouseObserver mouseObserver = new HenoohDeviceEmulator.MouseObserver();
                 mouseObserver.Enable = true;
                 // Bind a MouseMove event with a method
                 mouseObserver.MouseMove += MouseObserver_MouseMove;
             }
            
             // Print that the mouse has moved.
             public void MouseObserver_MouseMove(object sender, EventArgs e)
             {
                 System.Console.WriteLine("Mouse movement detected");
             }
             </code>
             </example>
             <visibility>public</visibility>
             <revisionhistory>
             YYYY-MM-DD  AS#####  v#.##.##.###  Change Description
             ==========  =======  ============  ============================================================================
             2015-04-30  AS00448  v0.00.04.014  Initial Version
             2015-05-07  AS00453  v0.00.04.017  Renamed the Class from MouseHookListener to MouseObserver
             2015-05-11  AS00455  v0.00.04.019  Use renamed base class
             2015-05-12  AS00456  v0.00.04.020  Use Point struct from System.Drawing.Point
             2015-06-04  AS00466  v0.00.04.028  Implement changes to GlobalHooker to GlobalObserver
             2015-06-08  AS00468  v0.00.04.030  Renamed Hooker class to ObserverAbstract
             2015-07-16  AS00490  v0.00.04.036  Modified comments under remarks and method
             2015-07-21  AS00493  v0.00.04.039  Moved InteropService for GetDoubleClickTime to local class
             2015-07-23  AS00495  v0.00.04.041  Use renamed class AppObserver
             2015-10-25  AS00544  v1.00.00.000  Now available on nuget.org
             2015-10-28  AS00547  v1.00.00.001  Simplified the summary
             2015-11-02  AS00552  v1.00.00.003  Use the new commenting that works with HenoohDocumentationGenerator
             2015-11-04  AS00554  v1.00.00.005  Added sealed modifier to the class and changed modifiers for some methods
             2015-11-05  AS00555  v1.00.00.006  Renamed Namespace from HenoohInputSimulator to HenoohDeviceEmulator
             2015-11-07  AS00556  v1.00.00.007  Renamed a parameter and modified some comments
             2015-11-18  AS00568  v1.00.01.008  Added a a default constructor and modified comments
             2015-11-23  AS00573  v1.00.01.010  Use modified version of MouseEventExtArgs without Point public property
             2016-02-07  AS00620  v1.00.03.002  Modified comments on methods and remarks
             2016-04-04  AS00663  v1.00.03.015  Replaced revisionhistory from CR# to AS#
             2016-07-11  AS00692  v1.00.03.017  Added example code for MouseObserver
             2016-07-13  AS00693  v1.00.03.018  Modified revision history to correct previous typo
             2016-08-19  AS00709  v1.00.03.021  Removed unused using statements
             2016-09-24  AS00729  v1.00.03.028  Moved P/Inovke method to SafeNativeMethods class
             2016-10-02  AS00737  v1.00.00.031  Replace int with IntPtr for SafeNativeMethod calls
             2016-10-08  AS00743  v1.00.03.032  Use IntPtr for wParam instead of int
             2016-10-11  AS00746  v1.00.03.033  Rewrite Dispose method
             2016-10-13  AS00748  v1.00.03.035  Modified example of class to show renamed class
             2016-10-15  AS00750  v1.00.03.037  Changed fields to properties, renamed properties, added xml comment headers
             2016-10-18  AS00753  v1.00.03.039  Added visibility xml tags
             2016-10-19  AS00754  v1.00.03.040  Corrected xml comment under constructor
             2016-11-15  AS00777  v1.00.04.009  Added comments to properties
             2016-12-03  AS00794  v1.00.05.003  Summary of default constructor changed with proper see tags
             2016-12-05  AS00796  v1.00.05.005  Follow Henooh Style Guidelines and fit in 120 columns
             2017-02-12  AS00833  v1.00.06.008  Follow Henooh Style Guidelines with parameter names with a prefix
             2017-08-20  AS00897  v1.01.00.001  Resolve messages IDE1005 where Delegate invocation can be simplified
             2018-03-26  AS01034  v1.01.02.002  Rename namespace from HenoohDeviceEmulator to Henooh.DeviceEmulator
             2019-01-25  AS01141  v1.01.03.004  Modify the summary of the XML comments for the constructors
             2019-04-18  AS01179  v1.01.04.006  Resolve IDE0054 by using compound assignment
             </revisionhistory>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Henooh.DeviceEmulator.MouseObserver"/> derived from <see cref="T:Henooh.DeviceEmulator.Native.BaseObserver"/>.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.#ctor(Henooh.DeviceEmulator.Native.ObserverAbstract)">
            <summary>
            Initializes a new instance of the <see cref="T:Henooh.DeviceEmulator.MouseObserver"/> with <see cref="T:Henooh.DeviceEmulator.Native.ObserverAbstract"/>
            as a parameter.
            </summary>
            <param name="aObserver">
            Depending on this parameter, the listener hooks either application or global mouse events.
            </param>
            <remarks>
            Hooks are not active after installation. You need to use either <see cref="P:Henooh.DeviceEmulator.Native.BaseObserver.Enabled"/> property
            or call <see cref="M:Henooh.DeviceEmulator.Native.BaseObserver.Start"/> method.
            </remarks>
            <visibility>public</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.MouseObserver.PreviousPosition">
            <summary>
            Used to determine if the mouse has moved or not.
            </summary>
            <visibility>private</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.MouseObserver.PreviousClickedTime">
            <summary>
            Used to determine what type of click it is to process.
            </summary>
            <visibility>private</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.MouseObserver.PreviousClicked">
            <summary>
            Used to determine if the mouse was previously clicked.
            </summary>
            <visibility>private</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.MouseObserver.DownButtonsWaitingForMouseUp">
            <summary>
            Used to determine the state of mouse button presses.
            </summary>
            <visibility>private</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.MouseObserver.SuppressButtonUpFlags">
            <summary>
            Used to suppress button up flags.
            </summary>
            <visibility>private</visibility>
        </member>
        <member name="P:Henooh.DeviceEmulator.MouseObserver.SystemDoubleClickTime">
            <summary>
            Used to determine the double click type.
            </summary>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.ProcessCallback(System.IntPtr,System.IntPtr)">
            <summary>
            This method processes the data from the hook and initiates event firing.
            </summary>
            <param name="wParam">The first Windows Messages parameter.</param>
            <param name="lParam">The second Windows Messages parameter.</param>
            <returns>
            True - The hook will be passed along to other applications.
            False - The hook will not be given to other applications, effectively blocking input.
            </returns>
            <visibility>protected</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.ProcessMouseDown(Henooh.DeviceEmulator.Native.MouseEventExtArgs@)">
            <summary>
            Method called when MouseDown flag is enabled.
            </summary>
            <param name="e"></param>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.ProcessPossibleDoubleClick(Henooh.DeviceEmulator.Native.MouseEventExtArgs@)">
            <summary>
            Method called when DoubleClick event is enabled.
            </summary>
            <param name="e"></param>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.ProcessMouseClick(Henooh.DeviceEmulator.Native.MouseEventExtArgs@)">
            <summary>
            Method called when MouseClick is enabled.
            </summary>
            <param name="e"></param>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.ProcessMouseUp(Henooh.DeviceEmulator.Native.MouseEventExtArgs@)">
            <summary>
            Method called when MouseUp event is called.
            </summary>
            <param name="e"></param>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.ProcessMouseMove(Henooh.DeviceEmulator.Native.MouseEventExtArgs@)">
            <summary>
            Method called when Mouse is Moved.
            </summary>
            <param name="e"></param>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.RemoveSupressButtonUpFlag(System.Windows.Forms.MouseButtons)">
            <summary>
            Method that remove SupressButtonUpFlags.
            </summary>
            <param name="aButton"></param>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.HasSupressButtonUpFlag(System.Windows.Forms.MouseButtons)">
            <summary>
            Method that returns SupressButtonUpFlags.
            </summary>
            <param name="aButton"></param>
            <returns></returns>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.SetSupressButtonUpFlag(System.Windows.Forms.MouseButtons)">
            <summary>
            Method that sets SupressButtonUpFlags.
            </summary>
            <param name="aButton"></param>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.GetHookId">
            <summary>
            Returns the correct hook id to be used for <see cref="M:Henooh.DeviceEmulator.Native.SafeNativeMethods.SetWindowsHookEx(System.Int32,Henooh.DeviceEmulator.Native.ObserverAbstract.HookCallback,System.IntPtr,System.Int32)"/> call.
            </summary>
            <returns>WH_MOUSE (0x07) or WH_MOUSE_LL (0x14) constant.</returns>
            <visibility>protected</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.HasMoved(System.Drawing.Point)">
            <summary>
            Method that returns when mouse has moved.
            </summary>
            <param name="aActualPoint"></param>
            <returns></returns>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.IsDoubleClick(System.Windows.Forms.MouseButtons,System.Int32)">
            <summary>
            Method that sets when mouse had double clicked.
            </summary>
            <param name="aButton"></param>
            <param name="aTimeStamp"></param>
            <returns></returns>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.InvokeMouseEventHandler(System.Windows.Forms.MouseEventHandler,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoker for Mouse Event Handler.
            </summary>
            <param name="aEventHandler"></param>
            <param name="e"></param>
            <visibility>private</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.InvokeMouseEventHandlerExt(System.EventHandler{Henooh.DeviceEmulator.Native.MouseEventExtArgs},Henooh.DeviceEmulator.Native.MouseEventExtArgs)">
            <summary>
            Invoker for Mouse Event Handler Extention.
            </summary>
            <param name="aEventHandler"></param>
            <param name="e"></param>
            <visibility>private</visibility>
        </member>
        <member name="E:Henooh.DeviceEmulator.MouseObserver.MouseMove">
            <summary>
            Occurs when the mouse pointer is moved.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="E:Henooh.DeviceEmulator.MouseObserver.MouseMoveExt">
            <summary>
            Occurs when the mouse pointer is moved.
            </summary>
            <remarks>
            This event provides extended arguments of type <see cref = "T:System.Windows.Forms.MouseEventArgs" /> enabling you to 
            supress further processing of mouse movement in other applications.
            </remarks>
            <visibility>internal</visibility>
        </member>
        <member name="E:Henooh.DeviceEmulator.MouseObserver.MouseClick">
            <summary>
            Occurs when a click was performed by the mouse.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="E:Henooh.DeviceEmulator.MouseObserver.MouseClickExt">
            <summary>
            Occurs when a click was performed by the mouse.
            </summary>
            <remarks>
            This event provides extended arguments of type <see cref = "T:System.Windows.Forms.MouseEventArgs" /> enabling you to 
            supress further processing of mouse click in other applications.
            </remarks>
        </member>
        <member name="E:Henooh.DeviceEmulator.MouseObserver.MouseDown">
            <summary>
            Occurs when the mouse a mouse button is pressed.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="E:Henooh.DeviceEmulator.MouseObserver.MouseDownExt">
            <summary>
            Occurs when the mouse a mouse button is pressed.
            </summary>
            <remarks>
            This event provides extended arguments of type <see cref = "T:System.Windows.Forms.MouseEventArgs" /> enabling you to 
            supress further processing of mouse click in other applications.
            </remarks>
            <visibility>internal</visibility>
        </member>
        <member name="E:Henooh.DeviceEmulator.MouseObserver.MouseUp">
            <summary>
            Occurs when a mouse button is released.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="E:Henooh.DeviceEmulator.MouseObserver.MouseWheel">
            <summary>
            Occurs when the mouse wheel moves.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="E:Henooh.DeviceEmulator.MouseObserver.MouseDoubleClick">
            <summary>
            Occurs when a mouse button is double-clicked.
            </summary>
            <visibility>public</visibility>
        </member>
        <member name="M:Henooh.DeviceEmulator.MouseObserver.Dispose(System.Boolean)">
            <summary>
            Release delegates, unsubscribes from hooks.
            </summary>
            <param name="aDisposing"></param>
            <visibility>protected</visibility>
        </member>
        <member name="T:Henooh.DeviceEmulator.res.values.strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Henooh.DeviceEmulator.res.values.strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Henooh.DeviceEmulator.res.values.strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Henooh.DeviceEmulator.res.values.strings.BaseObserverInvalidOperationExceptionMessage">
            <summary>
              Looks up a localized string similar to Hook listener is already started. Call Stop() method first or use Enabled property..
            </summary>
        </member>
    </members>
</doc>
